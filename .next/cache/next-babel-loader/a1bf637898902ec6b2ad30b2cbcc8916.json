{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/maxmohammadi/Vorbit-Space/src/layers/gateway.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as THREE from \"three\";\nimport KDBush from \"kdbush\";\nimport * as geokdbush from \"geokdbush\";\nimport { Setting, SettingCheckbox } from \"../components/settings\";\nvar gateways = [];\nfetch(\"/starlink_gateways.json\").then(function (res) {\n  return res.json();\n}).then(function (g) {\n  gateways = g.map(function (gateway) {\n    var _gateway$coordinates = _slicedToArray(gateway.coordinates, 3),\n      lng = _gateway$coordinates[0],\n      lat = _gateway$coordinates[1],\n      height = _gateway$coordinates[2];\n    return _objectSpread(_objectSpread({}, gateway), {}, {\n      position: {\n        lat: lat,\n        lng: lng,\n        height: height\n      }\n    });\n  });\n});\nexport function getGateways(_ref) {\n  var inactive = _ref.inactive;\n  return gateways.filter(function (gateway) {\n    return gateway.active || inactive;\n  });\n}\nexport function getGatewaysIndex(gateways) {\n  return new KDBush(gateways, function (g) {\n    return g.position.lng;\n  }, function (g) {\n    return g.position.lat;\n  });\n}\nexport function getGatewaysAround(index, point, radius) {\n  return geokdbush.around(index, point.lng, point.lat, Infinity, radius);\n}\nexport default {\n  key: \"gateway\",\n  name: \"Ground Stations\",\n  defaultConfig: {\n    inactive: false\n  },\n  objects: function objects(_ref2) {\n    var satellites = _ref2.satellites,\n      config = _ref2.config;\n    return gateways.filter(function (gateway) {\n      return gateway.active || config.layers.gateway.inactive;\n    }).map(function (gateway) {\n      return {\n        type: \"gateway\",\n        gateway: gateway\n      };\n    });\n  },\n  create: function create(globe, d) {\n    return new THREE.Mesh(new THREE.SphereBufferGeometry(1), new THREE.MeshPhongMaterial({\n      color: d.gateway.active ? \"green\" : \"rgb(0,50,0)\"\n    }));\n  },\n  update: function update(globe, d, obj) {\n    var gateway = d.gateway;\n    var _gateway$position = gateway.position,\n      lng = _gateway$position.lng,\n      lat = _gateway$position.lat;\n    Object.assign(obj.position, globe.getCoords(lat, lng, 0));\n  },\n  renderSettings: function renderSettings(_ref3) {\n    var checkboxConfig = _ref3.checkboxConfig;\n    return __jsx(Setting, {\n      title: \"Include Inactive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, __jsx(SettingCheckbox, _extends({}, checkboxConfig([\"layers\", \"gateway\", \"inactive\"]), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    })));\n  }\n};","map":{"version":3,"names":["THREE","KDBush","geokdbush","Setting","SettingCheckbox","gateways","fetch","then","res","json","g","map","gateway","_gateway$coordinates","_slicedToArray","coordinates","lng","lat","height","_objectSpread","position","getGateways","_ref","inactive","filter","active","getGatewaysIndex","getGatewaysAround","index","point","radius","around","Infinity","key","name","defaultConfig","objects","_ref2","satellites","config","layers","type","create","globe","d","Mesh","SphereBufferGeometry","MeshPhongMaterial","color","update","obj","_gateway$position","Object","assign","getCoords","renderSettings","_ref3","checkboxConfig","__jsx","title","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_extends"],"sources":["/Users/maxmohammadi/Vorbit-Space/src/layers/gateway.tsx"],"sourcesContent":["import * as THREE from \"three\";\n\nimport KDBush from \"kdbush\";\nimport * as geokdbush from \"geokdbush\";\n\nimport { Setting, SettingCheckbox } from \"../components/settings\";\n\nlet gateways = [];\nfetch(\"/starlink_gateways.json\")\n  .then((res) => res.json())\n  .then((g) => {\n    gateways = g.map((gateway) => {\n      const [lng, lat, height] = gateway.coordinates;\n      return { ...gateway, position: { lat, lng, height } };\n    });\n  });\n\nexport function getGateways({ inactive }) {\n  return gateways.filter((gateway) => gateway.active || inactive);\n}\n\nexport function getGatewaysIndex(gateways) {\n  return new KDBush(\n    gateways,\n    (g) => g.position.lng,\n    (g) => g.position.lat\n  );\n}\n\nexport function getGatewaysAround(index, point, radius) {\n  return geokdbush.around(index, point.lng, point.lat, Infinity, radius);\n}\n\nexport default {\n  key: \"gateway\",\n  name: \"Ground Stations\",\n  defaultConfig: {\n    inactive: false,\n  },\n  objects({ satellites, config }) {\n    return gateways\n      .filter((gateway) => gateway.active || config.layers.gateway.inactive)\n      .map((gateway) => ({ type: \"gateway\", gateway }));\n  },\n  create(globe, d) {\n    return new THREE.Mesh(\n      new THREE.SphereBufferGeometry(1),\n      new THREE.MeshPhongMaterial({\n        color: d.gateway.active ? \"green\" : \"rgb(0,50,0)\",\n      })\n    );\n  },\n  update(globe, d, obj) {\n    const { gateway } = d;\n    const { lng, lat } = gateway.position;\n    Object.assign(obj.position, globe.getCoords(lat, lng, 0));\n  },\n\n  renderSettings({ checkboxConfig }) {\n    return (\n      <Setting title=\"Include Inactive\">\n        <SettingCheckbox\n          {...checkboxConfig([\"layers\", \"gateway\", \"inactive\"])}\n        />\n      </Setting>\n    );\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}