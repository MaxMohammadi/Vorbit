{"ast":null,"code":"var _jsxFileName = \"/Users/maxmohammadi/Vorbit-Space/src/layers/gateway.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport * as THREE from \"three\";\nimport KDBush from \"kdbush\";\nimport * as geokdbush from \"geokdbush\";\nimport { Setting, SettingCheckbox } from \"../components/settings\";\nlet gateways = [];\nfetch(\"/starlink_gateways.json\").then(res => res.json()).then(g => {\n  gateways = g.map(gateway => {\n    const [lng, lat, height] = gateway.coordinates;\n    return _objectSpread(_objectSpread({}, gateway), {}, {\n      position: {\n        lat,\n        lng,\n        height\n      }\n    });\n  });\n});\nexport function getGateways({\n  inactive\n}) {\n  return gateways.filter(gateway => gateway.active || inactive);\n}\nexport function getGatewaysIndex(gateways) {\n  return new KDBush(gateways, g => g.position.lng, g => g.position.lat);\n}\nexport function getGatewaysAround(index, point, radius) {\n  return geokdbush.around(index, point.lng, point.lat, Infinity, radius);\n}\nexport default {\n  key: \"gateway\",\n  name: \"Ground Stations\",\n  defaultConfig: {\n    inactive: false\n  },\n  objects({\n    satellites,\n    config\n  }) {\n    return gateways.filter(gateway => gateway.active || config.layers.gateway.inactive).map(gateway => ({\n      type: \"gateway\",\n      gateway\n    }));\n  },\n  create(globe, d) {\n    return new THREE.Mesh(new THREE.SphereBufferGeometry(1), new THREE.MeshPhongMaterial({\n      color: d.gateway.active ? \"green\" : \"rgb(0,50,0)\"\n    }));\n  },\n  update(globe, d, obj) {\n    const {\n      gateway\n    } = d;\n    const {\n      lng,\n      lat\n    } = gateway.position;\n    Object.assign(obj.position, globe.getCoords(lat, lng, 0));\n  },\n  renderSettings({\n    checkboxConfig\n  }) {\n    return __jsx(Setting, {\n      title: \"Include Inactive\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, __jsx(SettingCheckbox, _extends({}, checkboxConfig([\"layers\", \"gateway\", \"inactive\"]), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    })));\n  }\n};","map":{"version":3,"names":["THREE","KDBush","geokdbush","Setting","SettingCheckbox","gateways","fetch","then","res","json","g","map","gateway","lng","lat","height","coordinates","_objectSpread","position","getGateways","inactive","filter","active","getGatewaysIndex","getGatewaysAround","index","point","radius","around","Infinity","key","name","defaultConfig","objects","satellites","config","layers","type","create","globe","d","Mesh","SphereBufferGeometry","MeshPhongMaterial","color","update","obj","Object","assign","getCoords","renderSettings","checkboxConfig","__jsx","title","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_extends"],"sources":["/Users/maxmohammadi/Vorbit-Space/src/layers/gateway.tsx"],"sourcesContent":["import * as THREE from \"three\";\n\nimport KDBush from \"kdbush\";\nimport * as geokdbush from \"geokdbush\";\n\nimport { Setting, SettingCheckbox } from \"../components/settings\";\n\nlet gateways = [];\nfetch(\"/starlink_gateways.json\")\n  .then((res) => res.json())\n  .then((g) => {\n    gateways = g.map((gateway) => {\n      const [lng, lat, height] = gateway.coordinates;\n      return { ...gateway, position: { lat, lng, height } };\n    });\n  });\n\nexport function getGateways({ inactive }) {\n  return gateways.filter((gateway) => gateway.active || inactive);\n}\n\nexport function getGatewaysIndex(gateways) {\n  return new KDBush(\n    gateways,\n    (g) => g.position.lng,\n    (g) => g.position.lat\n  );\n}\n\nexport function getGatewaysAround(index, point, radius) {\n  return geokdbush.around(index, point.lng, point.lat, Infinity, radius);\n}\n\nexport default {\n  key: \"gateway\",\n  name: \"Ground Stations\",\n  defaultConfig: {\n    inactive: false,\n  },\n  objects({ satellites, config }) {\n    return gateways\n      .filter((gateway) => gateway.active || config.layers.gateway.inactive)\n      .map((gateway) => ({ type: \"gateway\", gateway }));\n  },\n  create(globe, d) {\n    return new THREE.Mesh(\n      new THREE.SphereBufferGeometry(1),\n      new THREE.MeshPhongMaterial({\n        color: d.gateway.active ? \"green\" : \"rgb(0,50,0)\",\n      })\n    );\n  },\n  update(globe, d, obj) {\n    const { gateway } = d;\n    const { lng, lat } = gateway.position;\n    Object.assign(obj.position, globe.getCoords(lat, lng, 0));\n  },\n\n  renderSettings({ checkboxConfig }) {\n    return (\n      <Setting title=\"Include Inactive\">\n        <SettingCheckbox\n          {...checkboxConfig([\"layers\", \"gateway\", \"inactive\"])}\n        />\n      </Setting>\n    );\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}