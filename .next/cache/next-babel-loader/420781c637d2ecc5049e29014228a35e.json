{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _excluded = [\"direction\"];\nvar __jsx = React.createElement;\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from \"react\";\nimport { Setting, SettingCheckbox, SettingNumber } from \"../components/settings\";\nimport * as THREE from \"three\";\nimport { EARTH_RADIUS_KM } from \"../constants\";\nexport var DEFAULT_ROUTING_CONFIG = {\n  use_laser_links: true,\n  use_gateways: true,\n  // new york\n  pointA: {\n    lat: 40.7128,\n    lng: -74.006\n  },\n  // london\n  // pointB: {\n  //   lat: 51.5074,\n  //   lng: -0.1278,\n  // },\n  // san francisco\n  pointB: {\n    lat: 37.7749,\n    lng: -122.4194\n  }\n};\nexport default {\n  key: \"routing\",\n  name: \"Routes\",\n  defaultConfig: DEFAULT_ROUTING_CONFIG,\n  objects: function objects(_ref) {\n    var satellites = _ref.satellites,\n      config = _ref.config;\n    var pointA = config.layers.routing.pointA;\n    var pointB = config.layers.routing.pointB;\n    var path = [_objectSpread(_objectSpread({}, pointA), {}, {\n      height: 0\n    }), _objectSpread(_objectSpread({}, pointA), {}, {\n      height: 550\n    }), _objectSpread(_objectSpread({}, pointB), {}, {\n      height: 550\n    }), _objectSpread(_objectSpread({}, pointB), {}, {\n      height: 0\n    })];\n    return [{\n      type: \"routing\",\n      sub_type: \"pointA\"\n    }, {\n      type: \"routing\",\n      sub_type: \"pointB\"\n    }, {\n      type: \"routing\",\n      sub_type: \"path\",\n      path: path\n    }];\n  },\n  create: function create(globe, d, globeRadius) {\n    if (d.sub_type === \"pointA\" || d.sub_type === \"pointB\") {\n      return new THREE.Mesh(new THREE.SphereBufferGeometry(1), new THREE.MeshPhongMaterial({\n        color: \"blue\"\n      }));\n    } else if (d.sub_type === \"path\") {\n      return new THREE.Line(new THREE.BufferGeometry(), new THREE.LineBasicMaterial({\n        color: \"blue\"\n      }));\n    }\n  },\n  update: function update(globe, d, obj) {\n    if (d.sub_type === \"pointA\" || d.sub_type === \"pointB\") {\n      var point = globe.config.layers.routing[d.sub_type];\n      Object.assign(obj.position, globe.getCoords(point.lat, point.lng, 0));\n    } else if (d.sub_type === \"path\") {\n      var pathPositions = globe.route ? globe.route.positions : [];\n      var positions = new Float32Array(pathPositions.length * 3);\n      var index = 0;\n      var _iterator = _createForOfIteratorHelper(pathPositions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var position = _step.value;\n          var _globe$getCoords = globe.getCoords(position.lat, position.lng, (position.height || 0) / EARTH_RADIUS_KM),\n            x = _globe$getCoords.x,\n            y = _globe$getCoords.y,\n            z = _globe$getCoords.z;\n          positions[index++] = x;\n          positions[index++] = y;\n          positions[index++] = z;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      obj.geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    }\n  },\n  renderSettings: function renderSettings(_ref2) {\n    var config = _ref2.config,\n      checkboxConfig = _ref2.checkboxConfig,\n      inputConfig = _ref2.inputConfig;\n    return __jsx(\"div\", null, config.satellitesType === \"generated\" && __jsx(Setting, {\n      title: \"Laser Links\"\n    }, __jsx(SettingCheckbox, checkboxConfig([\"layers\", \"routing\", \"use_laser_links\"]))), __jsx(Setting, {\n      title: \"Ground Stations\"\n    }, __jsx(SettingCheckbox, checkboxConfig([\"layers\", \"routing\", \"use_gateways\"]))), __jsx(Setting, {\n      title: \"Start\"\n    }, __jsx(SettingLatLng, _extends({\n      direction: \"lat\"\n    }, inputConfig([\"layers\", \"routing\", \"pointA\", \"lat\"]))), __jsx(SettingLatLng, _extends({\n      direction: \"lng\"\n    }, inputConfig([\"layers\", \"routing\", \"pointA\", \"lng\"])))), __jsx(Setting, {\n      title: \"End\"\n    }, __jsx(SettingLatLng, _extends({\n      direction: \"lat\"\n    }, inputConfig([\"layers\", \"routing\", \"pointB\", \"lat\"]))), __jsx(SettingLatLng, _extends({\n      direction: \"lng\"\n    }, inputConfig([\"layers\", \"routing\", \"pointB\", \"lng\"])))));\n  }\n};\nfunction SettingLatLng(_ref3) {\n  var direction = _ref3.direction,\n    props = _objectWithoutProperties(_ref3, _excluded);\n  return __jsx(\"span\", null, __jsx(SettingNumber, _extends({\n    style: {\n      maxWidth: 100\n    },\n    className: \"ml-1\"\n  }, props)), __jsx(\"span\", {\n    className: \"ml-1 mr-1\"\n  }, \"\\xB0\", direction === \"lat\" ? props.value < 0 ? \"S\" : \"N\" : props.value < 0 ? \"W\" : \"E\"));\n}","map":null,"metadata":{},"sourceType":"module"}