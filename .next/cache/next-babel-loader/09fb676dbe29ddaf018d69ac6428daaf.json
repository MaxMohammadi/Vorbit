{"ast":null,"code":"var _jsxFileName = \"/Users/maxmohammadi/Vorbit-Space/src/layers/laser.tsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from \"react\";\nimport { Setting, SettingCheckbox, SettingNumber } from \"../components/settings\";\nimport * as THREE from \"three\";\nimport { EARTH_RADIUS_KM } from \"../constants\";\nimport * as _ from \"lodash\";\nexport const DEFAULT_LASER_CONFIG = {\n  link_forward: true,\n  link_side: true,\n  link_side_offset: 0\n};\nconst getPlanesIndex = _.memoize(satellites => {\n  const planes = [];\n  for (let i = 0; i < satellites.length - 1; i++) {\n    const sat = satellites[i];\n    (planes[sat.plane] = planes[sat.plane] || [])[sat.index] = i;\n  }\n  return planes;\n});\nfunction neighborSatelliteIndex(satellites, satellite, satOffset = 0, planeOffset = 0) {\n  const planes = getPlanesIndex(satellites);\n  const plane = planes[(satellite.plane + planeOffset) % planes.length];\n  const nextIndex = plane[(satellite.index + satOffset) % plane.length];\n  return nextIndex;\n}\nfunction laserLinksForSatellite(satellite, index, satellites, {\n  link_forward = DEFAULT_LASER_CONFIG.link_forward,\n  link_side = DEFAULT_LASER_CONFIG.link_side,\n  link_side_offset = DEFAULT_LASER_CONFIG.link_side_offset\n} = {}) {\n  let indexes = [];\n  if (satellite.plane != null) {\n    indexes = [];\n    if (link_forward) {\n      // NOTE: doesn't make sense to allow configuring of offset for links in same orbital plane\n      indexes.push(neighborSatelliteIndex(satellites, satellite, 1, 0));\n    }\n    if (link_side) {\n      const offset = link_side_offset;\n      indexes.push(neighborSatelliteIndex(satellites, satellite, offset, 1));\n    }\n  }\n  return indexes.map(other => [index, other]);\n}\nexport function laserLinksForSatellites(satellites, laserConfig = {}) {\n  return satellites.map((sat, index) => laserLinksForSatellite(sat, index, satellites, laserConfig)).flat();\n}\nexport default {\n  key: \"laser\",\n  name: \"Laser Links\",\n  defaultConfig: DEFAULT_LASER_CONFIG,\n  objects({\n    laserLinks\n  }) {\n    return laserLinks.map(satelliteIndexes => ({\n      type: \"laser\",\n      satelliteIndexes: satelliteIndexes\n    }));\n  },\n  create(globe, d, globeRadius) {\n    const geometry = new THREE.BufferGeometry();\n    const positions = new Float32Array(2 * 3);\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    var material = new THREE.LineBasicMaterial({\n      color: 0xff0000\n    });\n    return new THREE.Line(geometry, material);\n  },\n  update(globe, d, obj) {\n    var array = obj.geometry.attributes.position.array;\n    let index = 0;\n    for (const position of d.positions || []) {\n      if (!position) {\n        return;\n      }\n      const {\n        x,\n        y,\n        z\n      } = globe.getCoords(position.lat, position.lng, position.height / EARTH_RADIUS_KM);\n      array[index++] = x;\n      array[index++] = y;\n      array[index++] = z;\n    }\n    obj.geometry.attributes.position.needsUpdate = true;\n  },\n  // settings\n  canEnable(config) {\n    return config.satellitesType === \"generated\";\n  },\n  renderSettings({\n    getConfig,\n    checkboxConfig,\n    inputConfig\n  }) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, __jsx(Setting, {\n      title: \"Forward Links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, __jsx(SettingCheckbox, _extends({}, checkboxConfig([\"layers\", \"laser\", \"link_forward\"]), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }))), __jsx(Setting, {\n      title: \"Side Links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, __jsx(SettingCheckbox, _extends({}, checkboxConfig([\"layers\", \"laser\", \"link_side\"]), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }))), getConfig([\"layers\", \"laser\", \"link_side\"]) && __jsx(Setting, {\n      title: \"Side Link Offset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, __jsx(SettingNumber, _extends({\n      min: -5,\n      max: 5\n    }, inputConfig([\"layers\", \"laser\", \"link_side_offset\"]), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }))));\n  }\n};","map":{"version":3,"names":["React","Setting","SettingCheckbox","SettingNumber","THREE","EARTH_RADIUS_KM","_","DEFAULT_LASER_CONFIG","link_forward","link_side","link_side_offset","getPlanesIndex","memoize","satellites","planes","i","length","sat","plane","index","neighborSatelliteIndex","satellite","satOffset","planeOffset","nextIndex","laserLinksForSatellite","indexes","push","offset","map","other","laserLinksForSatellites","laserConfig","flat","key","name","defaultConfig","objects","laserLinks","satelliteIndexes","type","create","globe","d","globeRadius","geometry","BufferGeometry","positions","Float32Array","setAttribute","BufferAttribute","material","LineBasicMaterial","color","Line","update","obj","array","attributes","position","x","y","z","getCoords","lat","lng","height","needsUpdate","canEnable","config","satellitesType","renderSettings","getConfig","checkboxConfig","inputConfig","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","title","_extends","min","max"],"sources":["/Users/maxmohammadi/Vorbit-Space/src/layers/laser.tsx"],"sourcesContent":["import React from \"react\";\n\nimport {\n  Setting,\n  SettingCheckbox,\n  SettingNumber,\n} from \"../components/settings\";\n\nimport * as THREE from \"three\";\n\nimport { EARTH_RADIUS_KM } from \"../constants\";\n\nimport * as _ from \"lodash\";\n\nexport const DEFAULT_LASER_CONFIG = {\n  link_forward: true,\n  link_side: true,\n  link_side_offset: 0,\n};\n\nconst getPlanesIndex = _.memoize((satellites) => {\n  const planes = [];\n  for (let i = 0; i < satellites.length - 1; i++) {\n    const sat = satellites[i];\n    (planes[sat.plane] = planes[sat.plane] || [])[sat.index] = i;\n  }\n  return planes;\n});\n\nfunction neighborSatelliteIndex(\n  satellites,\n  satellite,\n  satOffset = 0,\n  planeOffset = 0\n) {\n  const planes = getPlanesIndex(satellites);\n  const plane = planes[(satellite.plane + planeOffset) % planes.length];\n  const nextIndex = plane[(satellite.index + satOffset) % plane.length];\n  return nextIndex;\n}\n\nfunction laserLinksForSatellite(\n  satellite,\n  index,\n  satellites,\n  {\n    link_forward = DEFAULT_LASER_CONFIG.link_forward,\n    link_side = DEFAULT_LASER_CONFIG.link_side,\n    link_side_offset = DEFAULT_LASER_CONFIG.link_side_offset,\n  } = {}\n) {\n  let indexes = [];\n  if (satellite.plane != null) {\n    indexes = [];\n    if (link_forward) {\n      // NOTE: doesn't make sense to allow configuring of offset for links in same orbital plane\n      indexes.push(neighborSatelliteIndex(satellites, satellite, 1, 0));\n    }\n    if (link_side) {\n      const offset = link_side_offset;\n      indexes.push(neighborSatelliteIndex(satellites, satellite, offset, 1));\n    }\n  }\n  return indexes.map((other) => [index, other]);\n}\n\nexport function laserLinksForSatellites(satellites, laserConfig = {}) {\n  return satellites\n    .map((sat, index) =>\n      laserLinksForSatellite(sat, index, satellites, laserConfig)\n    )\n    .flat();\n}\n\nexport default {\n  key: \"laser\",\n  name: \"Laser Links\",\n  defaultConfig: DEFAULT_LASER_CONFIG,\n  objects({ laserLinks }) {\n    return laserLinks.map((satelliteIndexes) => ({\n      type: \"laser\",\n      satelliteIndexes: satelliteIndexes,\n    }));\n  },\n  create(globe, d, globeRadius) {\n    const geometry = new THREE.BufferGeometry();\n    const positions = new Float32Array(2 * 3);\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    var material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n    return new THREE.Line(geometry, material);\n  },\n  update(globe, d, obj) {\n    var array = obj.geometry.attributes.position.array;\n    let index = 0;\n    for (const position of d.positions || []) {\n      if (!position) {\n        return;\n      }\n      const { x, y, z } = globe.getCoords(\n        position.lat,\n        position.lng,\n        position.height / EARTH_RADIUS_KM\n      );\n      array[index++] = x;\n      array[index++] = y;\n      array[index++] = z;\n    }\n    obj.geometry.attributes.position.needsUpdate = true;\n  },\n\n  // settings\n  canEnable(config) {\n    return config.satellitesType === \"generated\";\n  },\n  renderSettings({ getConfig, checkboxConfig, inputConfig }) {\n    return (\n      <div>\n        <Setting title=\"Forward Links\">\n          <SettingCheckbox\n            {...checkboxConfig([\"layers\", \"laser\", \"link_forward\"])}\n          />\n        </Setting>\n        <Setting title=\"Side Links\">\n          <SettingCheckbox\n            {...checkboxConfig([\"layers\", \"laser\", \"link_side\"])}\n          />\n        </Setting>\n        {getConfig([\"layers\", \"laser\", \"link_side\"]) && (\n          <Setting title=\"Side Link Offset\">\n            <SettingNumber\n              min={-5}\n              max={5}\n              {...inputConfig([\"layers\", \"laser\", \"link_side_offset\"])}\n            />\n          </Setting>\n        )}\n      </div>\n    );\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}