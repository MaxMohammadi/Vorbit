{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport * as THREE from \"three\";\nimport KDBush from \"kdbush\";\nimport * as geokdbush from \"geokdbush\";\nimport { Setting, SettingCheckbox } from \"../components/settings\";\nlet gateways = [];\nfetch(\"/starlink_gateways.json\").then(res => res.json()).then(g => {\n  gateways = g.map(gateway => {\n    const [lng, lat, height] = gateway.coordinates;\n    return _objectSpread(_objectSpread({}, gateway), {}, {\n      position: {\n        lat,\n        lng,\n        height\n      }\n    });\n  });\n});\nexport function getGateways({\n  inactive\n}) {\n  return gateways.filter(gateway => gateway.active || inactive);\n}\nexport function getGatewaysIndex(gateways) {\n  return new KDBush(gateways, g => g.position.lng, g => g.position.lat);\n}\nexport function getGatewaysAround(index, point, radius) {\n  return geokdbush.around(index, point.lng, point.lat, Infinity, radius);\n}\nexport default {\n  key: \"gateway\",\n  name: \"Ground Stations\",\n  defaultConfig: {\n    inactive: false\n  },\n  objects({\n    satellites,\n    config\n  }) {\n    return gateways.filter(gateway => gateway.active || config.layers.gateway.inactive).map(gateway => ({\n      type: \"gateway\",\n      gateway\n    }));\n  },\n  create(globe, d) {\n    return new THREE.Mesh(new THREE.SphereBufferGeometry(1), new THREE.MeshPhongMaterial({\n      color: d.gateway.active ? \"green\" : \"rgb(0,50,0)\"\n    }));\n  },\n  update(globe, d, obj) {\n    const {\n      gateway\n    } = d;\n    const {\n      lng,\n      lat\n    } = gateway.position;\n    Object.assign(obj.position, globe.getCoords(lat, lng, 0));\n  },\n  renderSettings({\n    checkboxConfig\n  }) {\n    return __jsx(Setting, {\n      title: \"Include Inactive\"\n    }, __jsx(SettingCheckbox, checkboxConfig([\"layers\", \"gateway\", \"inactive\"])));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}