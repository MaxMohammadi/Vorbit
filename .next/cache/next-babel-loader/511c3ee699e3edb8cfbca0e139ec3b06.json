{"ast":null,"code":"import * as satellite from \"satellite.js\";\nimport { getSatelliteCoverageRadius } from \"./coverage\";\nimport { EARTH_MASS_KG, EARTH_RADIUS_M, G } from \"./constants\";\nexport function getSatellitePosition(sat, time = new Date(), {\n  elevation = null\n} = {}) {\n  const positionAndVelocity = satellite.propagate(sat.satrec, time);\n  if (!positionAndVelocity.position) {\n    return;\n  }\n  const positionGd = satellite.eciToGeodetic(positionAndVelocity.position, satellite.gstime(time));\n  const lng = positionGd.longitude * 180 / Math.PI;\n  const lat = positionGd.latitude * 180 / Math.PI;\n  const height = positionGd.height;\n  const coverageRadius = elevation != null ? getSatelliteCoverageRadius(height, elevation) : null;\n  return {\n    sat,\n    lng,\n    lat,\n    height,\n    coverageRadius\n  };\n}\nexport function getSatellitePositions(sats, time = new Date(), {\n  elevation = null\n} = {}) {\n  return sats.map(sat => getSatellitePosition(sat, time, {\n    elevation\n  })).filter(x => x);\n}\nexport function orbitalPeriod(height) {\n  // https://www.physicsclassroom.com/class/circles/Lesson-4/Mathematics-of-Satellite-Motion\n  const R = EARTH_RADIUS_M + height * 1000;\n  return Math.sqrt(4 * Math.pow(Math.PI, 2) / (G * EARTH_MASS_KG) * Math.pow(R, 3));\n}\nexport function meanMotionRadPerMinute(height) {\n  const seconds = orbitalPeriod(height);\n  return 2 * Math.PI / (seconds / 60);\n}","map":null,"metadata":{},"sourceType":"module"}