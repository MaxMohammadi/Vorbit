{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { getSatellitePositions } from \"./satellites\";\nimport * as h3 from \"h3-js\";\nimport KDBush from \"kdbush\";\nimport * as geokdbush from \"geokdbush\";\nimport { DEFAULT_COVERAGE_RESOLUTION, DEFAULT_COVERAGE_ELEVATION } from \"./constants\";\n\n// coverage radius\n\nexport function getSatelliteCoverageRadius() {\n  var height = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 550;\n  var elevation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_COVERAGE_ELEVATION;\n  // http://www.phiphase.com/satellite_coverage.htm\n  var phi = (90 + elevation) * (Math.PI / 180);\n  var radiusEarth = 6372;\n\n  // Math.sin(alpha) / radiusEarth = (Math.sin(phi) / (radiusEarth + height));\n  // Math.sin(alpha) = (Math.sin(phi) / (radiusEarth + height)) * radiusEarth;\n  var alpha = Math.asin(Math.sin(phi) / (radiusEarth + height) * radiusEarth);\n\n  // theta + phi + alpha = Math.PI\n  var theta = Math.PI - phi - alpha;\n\n  // R = theta * radiusEarth\n  return theta * radiusEarth;\n}\n\n// cells and cell indexes\n\nexport function getCellsForResolution() {\n  var resolution = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_COVERAGE_RESOLUTION;\n  return h3.getRes0Indexes().map(function (cell) {\n    return h3.h3ToChildren(cell, resolution);\n  }).flat();\n}\nfunction getCellIndexes(_ref) {\n  var cells = _ref.cells,\n    _ref$resolution = _ref.resolution,\n    resolution = _ref$resolution === void 0 ? DEFAULT_COVERAGE_RESOLUTION : _ref$resolution;\n  if (cells) {\n    return getCellIndexesForCells(cells);\n  } else {\n    return getCellIndexesForResolution(resolution);\n  }\n}\nfunction getCellIndexesForCells(cells) {\n  var points = cells.map(function (cell) {\n    var _h3$h3ToGeo = h3.h3ToGeo(cell),\n      _h3$h3ToGeo2 = _slicedToArray(_h3$h3ToGeo, 2),\n      lat = _h3$h3ToGeo2[0],\n      lng = _h3$h3ToGeo2[1];\n    return {\n      cell: cell,\n      lat: lat,\n      lng: lng\n    };\n  });\n  var positionIndex = {};\n  var _iterator = _createForOfIteratorHelper(points),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var point = _step.value;\n      positionIndex[point.cell] = point;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var distanceIndex = new KDBush(points, function (p) {\n    return p.lng;\n  }, function (p) {\n    return p.lat;\n  });\n  return {\n    cells: cells,\n    positionIndex: positionIndex,\n    distanceIndex: distanceIndex\n  };\n}\nvar indexesByResolution = {};\nfunction getCellIndexesForResolution() {\n  var resolution = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_COVERAGE_RESOLUTION;\n  // memoized by resolution\n  if (!indexesByResolution[resolution]) {\n    var cells = getCellsForResolution(resolution);\n    indexesByResolution[resolution] = getCellIndexesForCells(cells);\n  }\n  return indexesByResolution[resolution];\n}\n\n// coverage maps\n\nexport function makeCoverage(cells) {\n  var coverage = {};\n  var _iterator2 = _createForOfIteratorHelper(cells),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var cell = _step2.value;\n      coverage[cell] = 0;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return coverage;\n}\nexport function computeCoverage(_ref2) {\n  var satellites = _ref2.satellites,\n    _ref2$start = _ref2.start,\n    start = _ref2$start === void 0 ? Date.now() : _ref2$start,\n    _ref2$period = _ref2.period,\n    period = _ref2$period === void 0 ? 1000 * 60 : _ref2$period,\n    _ref2$periods = _ref2.periods,\n    periods = _ref2$periods === void 0 ? 60 : _ref2$periods,\n    _ref2$elevation = _ref2.elevation,\n    elevation = _ref2$elevation === void 0 ? DEFAULT_COVERAGE_ELEVATION : _ref2$elevation,\n    _ref2$resolution = _ref2.resolution,\n    resolution = _ref2$resolution === void 0 ? DEFAULT_COVERAGE_RESOLUTION : _ref2$resolution,\n    _ref2$cells = _ref2.cells,\n    cells = _ref2$cells === void 0 ? null : _ref2$cells,\n    _ref2$indexes = _ref2.indexes,\n    indexes = _ref2$indexes === void 0 ? getCellIndexes({\n      cells: cells,\n      resolution: resolution\n    }) : _ref2$indexes,\n    _ref2$coverage = _ref2.coverage,\n    coverage = _ref2$coverage === void 0 ? makeCoverage(indexes.cells) : _ref2$coverage;\n  // console.time();\n  for (var i = 0; i < periods; i++) {\n    var date = new Date(start + period * i);\n    var _computeCoverageAtMom = computeCoverageAtMoment({\n        date: date,\n        satellites: satellites,\n        elevation: elevation,\n        indexes: indexes\n      }),\n      satellitesByCell = _computeCoverageAtMom.satellitesByCell;\n    for (var _i = 0, _Object$keys = Object.keys(satellitesByCell); _i < _Object$keys.length; _i++) {\n      var cell = _Object$keys[_i];\n      coverage[cell]++;\n    }\n  }\n  for (var _i2 = 0, _Object$keys2 = Object.keys(coverage); _i2 < _Object$keys2.length; _i2++) {\n    var _cell = _Object$keys2[_i2];\n    coverage[_cell] /= periods;\n  }\n  // console.timeEnd();\n  return coverage;\n}\nexport var computeCoverageAtMoment = computeCoverageAtMomentKDBush;\n//   const computeCoverageAtMoment = {\n//   \"#brute\": computeCoverageAtDateBruteForce,\n//   \"#kdbush\": computeCoverageAtMomentKDBush,\n//   \"#h3\": computeCoverageAtDateH3KRing,\n// }[window.location.hash];\n// console.log(computeCoverageAtMoment.name);\n\nfunction computeCoverageAtMomentKDBush(_ref3) {\n  var _ref3$date = _ref3.date,\n    date = _ref3$date === void 0 ? new Date() : _ref3$date,\n    _ref3$satellites = _ref3.satellites,\n    satellites = _ref3$satellites === void 0 ? null : _ref3$satellites,\n    _ref3$elevation = _ref3.elevation,\n    elevation = _ref3$elevation === void 0 ? DEFAULT_COVERAGE_ELEVATION : _ref3$elevation,\n    _ref3$resolution = _ref3.resolution,\n    resolution = _ref3$resolution === void 0 ? DEFAULT_COVERAGE_RESOLUTION : _ref3$resolution,\n    _ref3$cells = _ref3.cells,\n    cells = _ref3$cells === void 0 ? null : _ref3$cells,\n    _ref3$indexes = _ref3.indexes,\n    indexes = _ref3$indexes === void 0 ? getCellIndexes({\n      cells: cells,\n      resolution: resolution\n    }) : _ref3$indexes,\n    _ref3$positions = _ref3.positions,\n    positions = _ref3$positions === void 0 ? getSatellitePositions(satellites, date, {\n      elevation: elevation\n    }) : _ref3$positions;\n  var satellitesByCell = {};\n  var cellsBySatellite = positions.map(function (position, index) {\n    var matches = geokdbush.around(indexes.distanceIndex, position.lng, position.lat, Infinity, position.coverageRadius);\n    return matches.map(function (_ref4) {\n      var cell = _ref4.cell;\n      (satellitesByCell[cell] = satellitesByCell[cell] || []).push(index);\n      return cell;\n    });\n  });\n  return {\n    satellitesByCell: satellitesByCell,\n    cellsBySatellite: cellsBySatellite\n  };\n}\n\n// function computeCoverageAtDateBruteForce({\n//   date = new Date(),\n//   // \"positions\" or \"satellites\" and \"date\" is required\n//   satellites = null,\n//   // misc\n//   elevation = DEFAULT_COVERAGE_ELEVATION,\n//   // either \"resolution\" or \"cells\" is required\n//   resolution = DEFAULT_COVERAGE_RESOLUTION,\n//   cells = null,\n//   // optimizations\n//   indexes = getCellIndexes({ cells, resolution }),\n//   coverage = makeCoverage(indexes.cells),\n//   positions = getSatellitePositions(satellites, date, { elevation }),\n// }) {\n//   for (const [cell, cellPosition] of Object.entries(indexes.positionIndex)) {\n//     for (const position of positions) {\n//       if (arePointsNear(cellPosition, position, position.coverageRadius)) {\n//         coverage[cell]++;\n//         break;\n//       }\n//     }\n//   }\n// }\n\n// function computeCoverageAtDateH3KRing({\n//   date = new Date(),\n//   // \"positions\" or \"satellites\" and \"date\" is required\n//   satellites = null,\n//   // misc\n//   elevation = 40,\n//   // either \"resolution\" or \"cells\" is required\n//   resolution = DEFAULT_COVERAGE_RESOLUTION,\n//   cells = null,\n//   // optimizations\n//   indexes = getCellIndexes({ cells, resolution }),\n//   coverage = makeCoverage(indexes.cells),\n//   positions = getSatellitePositions(satellites, date, { elevation }),\n// }) {\n//   const covered = {};\n//   for (const position of positions) {\n//     const checked = {};\n//     const check = (cell, skipDistanceCheck = false) => {\n//       if (checked[cell]) {\n//         return;\n//       }\n//       checked[cell] = true;\n//       if (\n//         skipDistanceCheck ||\n//         arePointsNear(\n//           indexes.positionIndex[cell],\n//           position,\n//           position.coverageRadius\n//         )\n//       ) {\n//         if (!covered[cell]) {\n//           covered[cell] = true;\n//           coverage[cell]++;\n//         }\n//         for (const neighbor of h3.kRing(cell, 1)) {\n//           check(neighbor);\n//         }\n//       }\n//     };\n//     check(h3.geoToH3(position.lat, position.lng, 2), true);\n//   }\n// }","map":null,"metadata":{},"sourceType":"module"}