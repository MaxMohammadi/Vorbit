{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/maxmohammadi/Vorbit-Space/src/layers/coverage_average.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport * as THREE from \"three\";\nimport chroma from \"chroma-js\";\nimport * as h3 from \"h3-js\";\nimport * as _ from \"lodash\";\nimport { Setting, SettingNumber } from \"../components/settings\";\nvar getCoverageObject = _.memoize(function (cell) {\n  return {\n    type: \"coverage\",\n    cell: cell\n  };\n});\nexport default {\n  name: \"Coverage (Average)\",\n  defaultConfig: {\n    enabled: false,\n    resolution: 2\n  },\n  objects: function objects(_ref) {\n    var cells = _ref.cells;\n    return cells.map(function (cell) {\n      return getCoverageObject(cell);\n    });\n  },\n  create: function create(globe, d, globeRadius) {\n    var color = cellColor(globe, d.cell);\n    var center = cellCenter(globe, d.cell);\n    var corners = cellCorners(globe, d.cell);\n    if (false) {\n      var geometry = new THREE.BufferGeometry().setFromPoints(corners);\n      var material = new THREE.LineBasicMaterial({\n        color: color\n      });\n      return new THREE.Line(geometry, material);\n    } else {\n      var _geometry$vertices;\n      var _geometry = new THREE.Geometry();\n      (_geometry$vertices = _geometry.vertices).push.apply(_geometry$vertices, [center].concat(_toConsumableArray(corners)));\n      for (var i = 0; i < corners.length - 1; i++) {\n        _geometry.faces.push(new THREE.Face3(0, i + 1, i + 2));\n      }\n      _geometry.computeFaceNormals();\n      var _material = new THREE.MeshBasicMaterial({\n        color: color,\n        opacity: 0.25,\n        transparent: true\n      });\n      return new THREE.Mesh(_geometry, _material);\n\n      // const geometry = new THREE.Geometry();\n      // addCoverageFace(geometry, globe, d.cell);\n      // geometry.computeFaceNormals();\n      // const material = new THREE.MeshPhongMaterial({\n      //   opacity: 0.25,\n      //   transparent: true,\n      //   vertexColors: true,\n      // });\n      // return new THREE.Mesh(geometry, material);\n    }\n  },\n  update: function update(globe, d, obj) {\n    obj.material.color.set(cellColor(globe, d.cell));\n    // obj.material.color.set(Math.random() < 0.5 ? \"red\" : \"green\");\n  },\n  renderSettings: function renderSettings(_ref2) {\n    var inputConfig = _ref2.inputConfig;\n    return __jsx(Setting, {\n      title: \"Resolution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, __jsx(SettingNumber, _extends({\n      min: 1,\n      max: 3\n    }, inputConfig([\"layers\", \"coverage\", \"resolution\"]), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    })));\n  }\n};\nvar colorScale = chroma.scale(\"RdYlBu\").domain([0, 1]);\nfunction positionToVector3(globe, _ref3) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n    lng = _ref4[0],\n    lat = _ref4[1];\n  var altitude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.01;\n  var _globe$getCoords = globe.getCoords(lat, lng, altitude),\n    x = _globe$getCoords.x,\n    y = _globe$getCoords.y,\n    z = _globe$getCoords.z;\n  return new THREE.Vector3(x, y, z);\n}\nfunction cellCorners(globe, cell) {\n  return h3.h3ToGeoBoundary(cell, true).map(function (bound) {\n    return positionToVector3(globe, bound);\n  });\n}\nfunction cellCenter(globe, cell) {\n  var centerCoords = globe.getCoords.apply(globe, _toConsumableArray(h3.h3ToGeo(cell)).concat([0.01]));\n  return new THREE.Vector3(centerCoords.x, centerCoords.y, centerCoords.z);\n}\nfunction cellColor(globe, cell) {\n  return new THREE.Color(colorScale(globe.coverage[cell]).hex());\n}\nfunction createCoverageMesh(globe, cells) {\n  var geometry = new THREE.Geometry();\n  var _iterator = _createForOfIteratorHelper(cells),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var cell = _step.value;\n      addCoverageFace(geometry, globe, cell);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  geometry.computeFaceNormals();\n  var material = new THREE.MeshPhongMaterial({\n    opacity: 0.25,\n    transparent: true,\n    vertexColors: true\n  });\n  return new THREE.Mesh(geometry, material);\n}\nfunction addCoverageFace(geometry, globe, cell) {\n  var _geometry$vertices2;\n  var color = cellColor(globe, cell);\n  var center = cellCenter(globe, cell);\n  var corners = cellCorners(globe, cell);\n  var vertexOffset = geometry.vertices.length;\n  (_geometry$vertices2 = geometry.vertices).push.apply(_geometry$vertices2, [center].concat(_toConsumableArray(corners)));\n  for (var i = 0; i < corners.length - 1; i++) {\n    geometry.faces.push(new THREE.Face3(vertexOffset, vertexOffset + i + 1, vertexOffset + i + 2, null, color));\n  }\n}","map":{"version":3,"names":["THREE","chroma","h3","_","Setting","SettingNumber","getCoverageObject","memoize","cell","type","name","defaultConfig","enabled","resolution","objects","_ref","cells","map","create","globe","d","globeRadius","color","cellColor","center","cellCenter","corners","cellCorners","geometry","BufferGeometry","setFromPoints","material","LineBasicMaterial","Line","_geometry$vertices","Geometry","vertices","push","apply","concat","_toConsumableArray","i","length","faces","Face3","computeFaceNormals","MeshBasicMaterial","opacity","transparent","Mesh","update","obj","set","renderSettings","_ref2","inputConfig","__jsx","title","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_extends","min","max","colorScale","scale","domain","positionToVector3","_ref3","_ref4","_slicedToArray","lng","lat","altitude","arguments","undefined","_globe$getCoords","getCoords","x","y","z","Vector3","h3ToGeoBoundary","bound","centerCoords","h3ToGeo","Color","coverage","hex","createCoverageMesh","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","addCoverageFace","err","e","f","MeshPhongMaterial","vertexColors","_geometry$vertices2","vertexOffset"],"sources":["/Users/maxmohammadi/Vorbit-Space/src/layers/coverage_average.tsx"],"sourcesContent":["import * as THREE from \"three\";\n\nimport chroma from \"chroma-js\";\nimport * as h3 from \"h3-js\";\nimport * as _ from \"lodash\";\n\nimport { Setting, SettingNumber } from \"../components/settings\";\n\nconst getCoverageObject = _.memoize((cell) => ({\n  type: \"coverage\",\n  cell: cell,\n}));\n\nexport default {\n  name: \"Coverage (Average)\",\n  defaultConfig: {\n    enabled: false,\n    resolution: 2,\n  },\n  objects({ cells }) {\n    return cells.map((cell) => getCoverageObject(cell));\n  },\n  create(globe, d, globeRadius) {\n    const color = cellColor(globe, d.cell);\n    const center = cellCenter(globe, d.cell);\n    const corners = cellCorners(globe, d.cell);\n\n    if (false) {\n      const geometry = new THREE.BufferGeometry().setFromPoints(corners);\n      const material = new THREE.LineBasicMaterial({ color });\n      return new THREE.Line(geometry, material);\n    } else {\n      const geometry = new THREE.Geometry();\n      geometry.vertices.push(center, ...corners);\n      for (let i = 0; i < corners.length - 1; i++) {\n        geometry.faces.push(new THREE.Face3(0, i + 1, i + 2));\n      }\n      geometry.computeFaceNormals();\n      const material = new THREE.MeshBasicMaterial({\n        color: color,\n        opacity: 0.25,\n        transparent: true,\n      });\n      return new THREE.Mesh(geometry, material);\n\n      // const geometry = new THREE.Geometry();\n      // addCoverageFace(geometry, globe, d.cell);\n      // geometry.computeFaceNormals();\n      // const material = new THREE.MeshPhongMaterial({\n      //   opacity: 0.25,\n      //   transparent: true,\n      //   vertexColors: true,\n      // });\n      // return new THREE.Mesh(geometry, material);\n    }\n  },\n\n  update(globe, d, obj) {\n    obj.material.color.set(cellColor(globe, d.cell));\n    // obj.material.color.set(Math.random() < 0.5 ? \"red\" : \"green\");\n  },\n\n  renderSettings({ inputConfig }) {\n    return (\n      <Setting title=\"Resolution\">\n        <SettingNumber\n          min={1}\n          max={3}\n          {...inputConfig([\"layers\", \"coverage\", \"resolution\"])}\n        />\n      </Setting>\n    );\n  },\n};\n\nconst colorScale = chroma.scale(\"RdYlBu\").domain([0, 1]);\n\nfunction positionToVector3(\n  globe,\n  [lng, lat]: [number, number],\n  altitude = 0.01\n) {\n  const { x, y, z } = globe.getCoords(lat, lng, altitude);\n  return new THREE.Vector3(x, y, z);\n}\n\nfunction cellCorners(globe, cell) {\n  return h3\n    .h3ToGeoBoundary(cell, true)\n    .map((bound) => positionToVector3(globe, bound));\n}\nfunction cellCenter(globe, cell) {\n  const centerCoords = globe.getCoords(...h3.h3ToGeo(cell), 0.01);\n  return new THREE.Vector3(centerCoords.x, centerCoords.y, centerCoords.z);\n}\n\nfunction cellColor(globe, cell) {\n  return new THREE.Color(colorScale(globe.coverage[cell]).hex());\n}\n\nfunction createCoverageMesh(globe, cells) {\n  const geometry = new THREE.Geometry();\n  for (const cell of cells) {\n    addCoverageFace(geometry, globe, cell);\n  }\n  geometry.computeFaceNormals();\n  const material = new THREE.MeshPhongMaterial({\n    opacity: 0.25,\n    transparent: true,\n    vertexColors: true,\n  });\n  return new THREE.Mesh(geometry, material);\n}\n\nfunction addCoverageFace(geometry, globe, cell) {\n  const color = cellColor(globe, cell);\n  const center = cellCenter(globe, cell);\n  const corners = cellCorners(globe, cell);\n  const vertexOffset = geometry.vertices.length;\n  geometry.vertices.push(center, ...corners);\n  for (let i = 0; i < corners.length - 1; i++) {\n    geometry.faces.push(\n      new THREE.Face3(\n        vertexOffset,\n        vertexOffset + i + 1,\n        vertexOffset + i + 2,\n        null,\n        color\n      )\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}