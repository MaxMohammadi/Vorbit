{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport * as THREE from \"three\";\nimport chroma from \"chroma-js\";\nimport * as h3 from \"h3-js\";\nimport * as _ from \"lodash\";\nimport { Setting, SettingNumber } from \"../components/settings\";\nvar getCoverageObject = _.memoize(function (cell) {\n  return {\n    type: \"coverage\",\n    cell: cell\n  };\n});\nexport default {\n  name: \"Coverage (Average)\",\n  defaultConfig: {\n    enabled: false,\n    resolution: 2\n  },\n  objects: function objects(_ref) {\n    var cells = _ref.cells;\n    return cells.map(function (cell) {\n      return getCoverageObject(cell);\n    });\n  },\n  create: function create(globe, d, globeRadius) {\n    var color = cellColor(globe, d.cell);\n    var center = cellCenter(globe, d.cell);\n    var corners = cellCorners(globe, d.cell);\n    if (false) {\n      var geometry = new THREE.BufferGeometry().setFromPoints(corners);\n      var material = new THREE.LineBasicMaterial({\n        color: color\n      });\n      return new THREE.Line(geometry, material);\n    } else {\n      var _geometry$vertices;\n      var _geometry = new THREE.Geometry();\n      (_geometry$vertices = _geometry.vertices).push.apply(_geometry$vertices, [center].concat(_toConsumableArray(corners)));\n      for (var i = 0; i < corners.length - 1; i++) {\n        _geometry.faces.push(new THREE.Face3(0, i + 1, i + 2));\n      }\n      _geometry.computeFaceNormals();\n      var _material = new THREE.MeshBasicMaterial({\n        color: color,\n        opacity: 0.25,\n        transparent: true\n      });\n      return new THREE.Mesh(_geometry, _material);\n\n      // const geometry = new THREE.Geometry();\n      // addCoverageFace(geometry, globe, d.cell);\n      // geometry.computeFaceNormals();\n      // const material = new THREE.MeshPhongMaterial({\n      //   opacity: 0.25,\n      //   transparent: true,\n      //   vertexColors: true,\n      // });\n      // return new THREE.Mesh(geometry, material);\n    }\n  },\n  update: function update(globe, d, obj) {\n    obj.material.color.set(cellColor(globe, d.cell));\n    // obj.material.color.set(Math.random() < 0.5 ? \"red\" : \"green\");\n  },\n  renderSettings: function renderSettings(_ref2) {\n    var inputConfig = _ref2.inputConfig;\n    return __jsx(Setting, {\n      title: \"Resolution\"\n    }, __jsx(SettingNumber, _extends({\n      min: 1,\n      max: 3\n    }, inputConfig([\"layers\", \"coverage\", \"resolution\"]))));\n  }\n};\nvar colorScale = chroma.scale(\"RdYlBu\").domain([0, 1]);\nfunction positionToVector3(globe, _ref3) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n    lng = _ref4[0],\n    lat = _ref4[1];\n  var altitude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.01;\n  var _globe$getCoords = globe.getCoords(lat, lng, altitude),\n    x = _globe$getCoords.x,\n    y = _globe$getCoords.y,\n    z = _globe$getCoords.z;\n  return new THREE.Vector3(x, y, z);\n}\nfunction cellCorners(globe, cell) {\n  return h3.h3ToGeoBoundary(cell, true).map(function (bound) {\n    return positionToVector3(globe, bound);\n  });\n}\nfunction cellCenter(globe, cell) {\n  var centerCoords = globe.getCoords.apply(globe, _toConsumableArray(h3.h3ToGeo(cell)).concat([0.01]));\n  return new THREE.Vector3(centerCoords.x, centerCoords.y, centerCoords.z);\n}\nfunction cellColor(globe, cell) {\n  return new THREE.Color(colorScale(globe.coverage[cell]).hex());\n}\nfunction createCoverageMesh(globe, cells) {\n  var geometry = new THREE.Geometry();\n  var _iterator = _createForOfIteratorHelper(cells),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var cell = _step.value;\n      addCoverageFace(geometry, globe, cell);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  geometry.computeFaceNormals();\n  var material = new THREE.MeshPhongMaterial({\n    opacity: 0.25,\n    transparent: true,\n    vertexColors: true\n  });\n  return new THREE.Mesh(geometry, material);\n}\nfunction addCoverageFace(geometry, globe, cell) {\n  var _geometry$vertices2;\n  var color = cellColor(globe, cell);\n  var center = cellCenter(globe, cell);\n  var corners = cellCorners(globe, cell);\n  var vertexOffset = geometry.vertices.length;\n  (_geometry$vertices2 = geometry.vertices).push.apply(_geometry$vertices2, [center].concat(_toConsumableArray(corners)));\n  for (var i = 0; i < corners.length - 1; i++) {\n    geometry.faces.push(new THREE.Face3(vertexOffset, vertexOffset + i + 1, vertexOffset + i + 2, null, color));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}