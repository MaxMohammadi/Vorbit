{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/maxmohammadi/Vorbit-Space/src/layers/laser.tsx\";\nvar __jsx = React.createElement;\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport React from \"react\";\nimport { Setting, SettingCheckbox, SettingNumber } from \"../components/settings\";\nimport * as THREE from \"three\";\nimport { EARTH_RADIUS_KM } from \"../constants\";\nimport * as _ from \"lodash\";\nexport var DEFAULT_LASER_CONFIG = {\n  link_forward: true,\n  link_side: true,\n  link_side_offset: 0\n};\nvar getPlanesIndex = _.memoize(function (satellites) {\n  var planes = [];\n  for (var i = 0; i < satellites.length - 1; i++) {\n    var sat = satellites[i];\n    (planes[sat.plane] = planes[sat.plane] || [])[sat.index] = i;\n  }\n  return planes;\n});\nfunction neighborSatelliteIndex(satellites, satellite) {\n  var satOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var planeOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var planes = getPlanesIndex(satellites);\n  var plane = planes[(satellite.plane + planeOffset) % planes.length];\n  var nextIndex = plane[(satellite.index + satOffset) % plane.length];\n  return nextIndex;\n}\nfunction laserLinksForSatellite(satellite, index, satellites) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n    _ref$link_forward = _ref.link_forward,\n    link_forward = _ref$link_forward === void 0 ? DEFAULT_LASER_CONFIG.link_forward : _ref$link_forward,\n    _ref$link_side = _ref.link_side,\n    link_side = _ref$link_side === void 0 ? DEFAULT_LASER_CONFIG.link_side : _ref$link_side,\n    _ref$link_side_offset = _ref.link_side_offset,\n    link_side_offset = _ref$link_side_offset === void 0 ? DEFAULT_LASER_CONFIG.link_side_offset : _ref$link_side_offset;\n  var indexes = [];\n  if (satellite.plane != null) {\n    indexes = [];\n    if (link_forward) {\n      // NOTE: doesn't make sense to allow configuring of offset for links in same orbital plane\n      indexes.push(neighborSatelliteIndex(satellites, satellite, 1, 0));\n    }\n    if (link_side) {\n      var offset = link_side_offset;\n      indexes.push(neighborSatelliteIndex(satellites, satellite, offset, 1));\n    }\n  }\n  return indexes.map(function (other) {\n    return [index, other];\n  });\n}\nexport function laserLinksForSatellites(satellites) {\n  var laserConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return satellites.map(function (sat, index) {\n    return laserLinksForSatellite(sat, index, satellites, laserConfig);\n  }).flat();\n}\nexport default {\n  key: \"laser\",\n  name: \"Laser Links\",\n  defaultConfig: DEFAULT_LASER_CONFIG,\n  objects: function objects(_ref2) {\n    var laserLinks = _ref2.laserLinks;\n    return laserLinks.map(function (satelliteIndexes) {\n      return {\n        type: \"laser\",\n        satelliteIndexes: satelliteIndexes\n      };\n    });\n  },\n  create: function create(globe, d, globeRadius) {\n    var geometry = new THREE.BufferGeometry();\n    var positions = new Float32Array(2 * 3);\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    var material = new THREE.LineBasicMaterial({\n      color: 0xff0000\n    });\n    return new THREE.Line(geometry, material);\n  },\n  update: function update(globe, d, obj) {\n    var array = obj.geometry.attributes.position.array;\n    var index = 0;\n    var _iterator = _createForOfIteratorHelper(d.positions || []),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var position = _step.value;\n        if (!position) {\n          return;\n        }\n        var _globe$getCoords = globe.getCoords(position.lat, position.lng, position.height / EARTH_RADIUS_KM),\n          x = _globe$getCoords.x,\n          y = _globe$getCoords.y,\n          z = _globe$getCoords.z;\n        array[index++] = x;\n        array[index++] = y;\n        array[index++] = z;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    obj.geometry.attributes.position.needsUpdate = true;\n  },\n  // settings\n  canEnable: function canEnable(config) {\n    return config.satellitesType === \"generated\";\n  },\n  renderSettings: function renderSettings(_ref3) {\n    var getConfig = _ref3.getConfig,\n      checkboxConfig = _ref3.checkboxConfig,\n      inputConfig = _ref3.inputConfig;\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, __jsx(Setting, {\n      title: \"Forward Links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, __jsx(SettingCheckbox, _extends({}, checkboxConfig([\"layers\", \"laser\", \"link_forward\"]), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }))), __jsx(Setting, {\n      title: \"Side Links\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, __jsx(SettingCheckbox, _extends({}, checkboxConfig([\"layers\", \"laser\", \"link_side\"]), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }))), getConfig([\"layers\", \"laser\", \"link_side\"]) && __jsx(Setting, {\n      title: \"Side Link Offset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, __jsx(SettingNumber, _extends({\n      min: -5,\n      max: 5\n    }, inputConfig([\"layers\", \"laser\", \"link_side_offset\"]), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }))));\n  }\n};","map":{"version":3,"names":["React","Setting","SettingCheckbox","SettingNumber","THREE","EARTH_RADIUS_KM","_","DEFAULT_LASER_CONFIG","link_forward","link_side","link_side_offset","getPlanesIndex","memoize","satellites","planes","i","length","sat","plane","index","neighborSatelliteIndex","satellite","satOffset","arguments","undefined","planeOffset","nextIndex","laserLinksForSatellite","_ref","_ref$link_forward","_ref$link_side","_ref$link_side_offset","indexes","push","offset","map","other","laserLinksForSatellites","laserConfig","flat","key","name","defaultConfig","objects","_ref2","laserLinks","satelliteIndexes","type","create","globe","d","globeRadius","geometry","BufferGeometry","positions","Float32Array","setAttribute","BufferAttribute","material","LineBasicMaterial","color","Line","update","obj","array","attributes","position","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","_globe$getCoords","getCoords","lat","lng","height","x","y","z","err","e","f","needsUpdate","canEnable","config","satellitesType","renderSettings","_ref3","getConfig","checkboxConfig","inputConfig","__jsx","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","title","_extends","min","max"],"sources":["/Users/maxmohammadi/Vorbit-Space/src/layers/laser.tsx"],"sourcesContent":["import React from \"react\";\n\nimport {\n  Setting,\n  SettingCheckbox,\n  SettingNumber,\n} from \"../components/settings\";\n\nimport * as THREE from \"three\";\n\nimport { EARTH_RADIUS_KM } from \"../constants\";\n\nimport * as _ from \"lodash\";\n\nexport const DEFAULT_LASER_CONFIG = {\n  link_forward: true,\n  link_side: true,\n  link_side_offset: 0,\n};\n\nconst getPlanesIndex = _.memoize((satellites) => {\n  const planes = [];\n  for (let i = 0; i < satellites.length - 1; i++) {\n    const sat = satellites[i];\n    (planes[sat.plane] = planes[sat.plane] || [])[sat.index] = i;\n  }\n  return planes;\n});\n\nfunction neighborSatelliteIndex(\n  satellites,\n  satellite,\n  satOffset = 0,\n  planeOffset = 0\n) {\n  const planes = getPlanesIndex(satellites);\n  const plane = planes[(satellite.plane + planeOffset) % planes.length];\n  const nextIndex = plane[(satellite.index + satOffset) % plane.length];\n  return nextIndex;\n}\n\nfunction laserLinksForSatellite(\n  satellite,\n  index,\n  satellites,\n  {\n    link_forward = DEFAULT_LASER_CONFIG.link_forward,\n    link_side = DEFAULT_LASER_CONFIG.link_side,\n    link_side_offset = DEFAULT_LASER_CONFIG.link_side_offset,\n  } = {}\n) {\n  let indexes = [];\n  if (satellite.plane != null) {\n    indexes = [];\n    if (link_forward) {\n      // NOTE: doesn't make sense to allow configuring of offset for links in same orbital plane\n      indexes.push(neighborSatelliteIndex(satellites, satellite, 1, 0));\n    }\n    if (link_side) {\n      const offset = link_side_offset;\n      indexes.push(neighborSatelliteIndex(satellites, satellite, offset, 1));\n    }\n  }\n  return indexes.map((other) => [index, other]);\n}\n\nexport function laserLinksForSatellites(satellites, laserConfig = {}) {\n  return satellites\n    .map((sat, index) =>\n      laserLinksForSatellite(sat, index, satellites, laserConfig)\n    )\n    .flat();\n}\n\nexport default {\n  key: \"laser\",\n  name: \"Laser Links\",\n  defaultConfig: DEFAULT_LASER_CONFIG,\n  objects({ laserLinks }) {\n    return laserLinks.map((satelliteIndexes) => ({\n      type: \"laser\",\n      satelliteIndexes: satelliteIndexes,\n    }));\n  },\n  create(globe, d, globeRadius) {\n    const geometry = new THREE.BufferGeometry();\n    const positions = new Float32Array(2 * 3);\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    var material = new THREE.LineBasicMaterial({ color: 0xff0000 });\n    return new THREE.Line(geometry, material);\n  },\n  update(globe, d, obj) {\n    var array = obj.geometry.attributes.position.array;\n    let index = 0;\n    for (const position of d.positions || []) {\n      if (!position) {\n        return;\n      }\n      const { x, y, z } = globe.getCoords(\n        position.lat,\n        position.lng,\n        position.height / EARTH_RADIUS_KM\n      );\n      array[index++] = x;\n      array[index++] = y;\n      array[index++] = z;\n    }\n    obj.geometry.attributes.position.needsUpdate = true;\n  },\n\n  // settings\n  canEnable(config) {\n    return config.satellitesType === \"generated\";\n  },\n  renderSettings({ getConfig, checkboxConfig, inputConfig }) {\n    return (\n      <div>\n        <Setting title=\"Forward Links\">\n          <SettingCheckbox\n            {...checkboxConfig([\"layers\", \"laser\", \"link_forward\"])}\n          />\n        </Setting>\n        <Setting title=\"Side Links\">\n          <SettingCheckbox\n            {...checkboxConfig([\"layers\", \"laser\", \"link_side\"])}\n          />\n        </Setting>\n        {getConfig([\"layers\", \"laser\", \"link_side\"]) && (\n          <Setting title=\"Side Link Offset\">\n            <SettingNumber\n              min={-5}\n              max={5}\n              {...inputConfig([\"layers\", \"laser\", \"link_side_offset\"])}\n            />\n          </Setting>\n        )}\n      </div>\n    );\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}