{"ast":null,"code":"import * as THREE from \"three\";\nimport * as _ from \"lodash\";\nimport { EARTH_RADIUS_KM } from \"../constants\";\nimport { getSatelliteCoverageRadius } from \"../coverage\";\nimport { getGatewaysAround } from \"./gateway\";\nconst objectForSatelliteIndex = _.memoize(index => ({\n  type: \"coverage\",\n  satelliteIndex: index\n}));\nfunction computeRadius(globe, d) {\n  return getSatelliteCoverageRadius(d.position.alt, globe.config.elevation) / EARTH_RADIUS_KM * globe.radius;\n}\nfunction makeCircle(radius, segments = 32) {\n  const vertices = new Float32Array((segments + 1) * 3);\n  const angle = 2 * Math.PI / segments;\n  for (let i = 0; i < segments + 1; i++) {\n    vertices[i * 3] = radius * Math.sin(i * angle);\n    vertices[i * 3 + 1] = radius * Math.cos(i * angle);\n    vertices[i * 3 + 2] = 0;\n  }\n  return vertices;\n}\nfunction makeRing(globe, radius) {\n  // const mesh = new THREE.Mesh(\n  //   new THREE.RingGeometry(radius - globe.radius / 400, radius, 32),\n  //   new THREE.MeshBasicMaterial({\n  //     color: \"rgb(0,100,0)\",\n  //     side: THREE.DoubleSide,\n  //   })\n  // );\n  // mesh._radius = radius;\n  // return mesh;\n  const geometry = new THREE.BufferGeometry();\n  geometry.setAttribute(\"position\", new THREE.BufferAttribute(makeCircle(radius), 3));\n  const material = new THREE.LineBasicMaterial({\n    color: \"blue\"\n  });\n  const line = new THREE.Line(geometry, material);\n  line._radius = radius;\n  return line;\n}\nexport default {\n  name: \"Coverage (Instantaneous)\",\n  defaultConfig: {},\n  objects({\n    satellites\n  }) {\n    return satellites.map((satellite, index) => objectForSatelliteIndex(index));\n  },\n  create(globe, d) {\n    if (!d.position) {\n      return;\n    }\n    const radius = computeRadius(globe, d);\n    return makeRing(globe, radius);\n  },\n  update(globe, d, obj) {\n    if (!d.position) {\n      return;\n    }\n    const radius = computeRadius(globe, d);\n    if (obj._radius !== radius) {\n      obj.geometry.setAttribute(\"position\", new THREE.BufferAttribute(makeCircle(radius), 3));\n      obj._radius = radius;\n    }\n    Object.assign(obj.position, globe.getCoords(d.position.lat, d.position.lng, 0));\n    const nearGateway = getGatewaysAround(globe.gatewaysIndex, d.position, d.position.coverageRadius).length > 0;\n    obj.material.color.set(nearGateway || !globe.config.layers.gateway.enabled ? \"green\" : \"rgb(100,100,0)\");\n    const globeCenter = globe.scene().localToWorld(new THREE.Vector3(0, 0, 0));\n    obj.lookAt(globeCenter);\n  },\n  renderSettings() {\n    return null;\n  }\n};","map":{"version":3,"names":["THREE","_","EARTH_RADIUS_KM","getSatelliteCoverageRadius","getGatewaysAround","objectForSatelliteIndex","memoize","index","type","satelliteIndex","computeRadius","globe","d","position","alt","config","elevation","radius","makeCircle","segments","vertices","Float32Array","angle","Math","PI","i","sin","cos","makeRing","geometry","BufferGeometry","setAttribute","BufferAttribute","material","LineBasicMaterial","color","line","Line","_radius","name","defaultConfig","objects","satellites","map","satellite","create","update","obj","Object","assign","getCoords","lat","lng","nearGateway","gatewaysIndex","coverageRadius","length","set","layers","gateway","enabled","globeCenter","scene","localToWorld","Vector3","lookAt","renderSettings"],"sources":["/Users/maxmohammadi/Vorbit-Space/src/layers/coverage_instantaneous.tsx"],"sourcesContent":["import * as THREE from \"three\";\n\nimport * as _ from \"lodash\";\n\nimport { EARTH_RADIUS_KM } from \"../constants\";\nimport { getSatelliteCoverageRadius } from \"../coverage\";\nimport { getGatewaysAround } from \"./gateway\";\n\nconst objectForSatelliteIndex = _.memoize((index) => ({\n  type: \"coverage\",\n  satelliteIndex: index,\n}));\n\nfunction computeRadius(globe, d) {\n  return (\n    (getSatelliteCoverageRadius(d.position.alt, globe.config.elevation) /\n      EARTH_RADIUS_KM) *\n    globe.radius\n  );\n}\n\nfunction makeCircle(radius, segments = 32) {\n  const vertices = new Float32Array((segments + 1) * 3);\n  const angle = (2 * Math.PI) / segments;\n  for (let i = 0; i < segments + 1; i++) {\n    vertices[i * 3] = radius * Math.sin(i * angle);\n    vertices[i * 3 + 1] = radius * Math.cos(i * angle);\n    vertices[i * 3 + 2] = 0;\n  }\n  return vertices;\n}\n\nfunction makeRing(globe, radius) {\n  // const mesh = new THREE.Mesh(\n  //   new THREE.RingGeometry(radius - globe.radius / 400, radius, 32),\n  //   new THREE.MeshBasicMaterial({\n  //     color: \"rgb(0,100,0)\",\n  //     side: THREE.DoubleSide,\n  //   })\n  // );\n  // mesh._radius = radius;\n  // return mesh;\n  const geometry = new THREE.BufferGeometry();\n  geometry.setAttribute(\n    \"position\",\n    new THREE.BufferAttribute(makeCircle(radius), 3)\n  );\n  const material = new THREE.LineBasicMaterial({ color: \"blue\" });\n  const line = new THREE.Line(geometry, material);\n  line._radius = radius;\n  return line;\n}\n\nexport default {\n  name: \"Coverage (Instantaneous)\",\n  defaultConfig: {},\n  objects({ satellites }) {\n    return satellites.map((satellite, index) => objectForSatelliteIndex(index));\n  },\n  create(globe, d) {\n    if (!d.position) {\n      return;\n    }\n    const radius = computeRadius(globe, d);\n    return makeRing(globe, radius);\n  },\n  update(globe, d, obj) {\n    if (!d.position) {\n      return;\n    }\n    const radius = computeRadius(globe, d);\n    if (obj._radius !== radius) {\n      obj.geometry.setAttribute(\n        \"position\",\n        new THREE.BufferAttribute(makeCircle(radius), 3)\n      );\n      obj._radius = radius;\n    }\n    Object.assign(\n      obj.position,\n      globe.getCoords(d.position.lat, d.position.lng, 0)\n    );\n\n    const nearGateway =\n      getGatewaysAround(\n        globe.gatewaysIndex,\n        d.position,\n        d.position.coverageRadius\n      ).length > 0;\n    obj.material.color.set(\n      nearGateway || !globe.config.layers.gateway.enabled\n        ? \"green\"\n        : \"rgb(100,100,0)\"\n    );\n\n    const globeCenter = globe.scene().localToWorld(new THREE.Vector3(0, 0, 0));\n    obj.lookAt(globeCenter);\n  },\n\n  renderSettings() {\n    return null;\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}