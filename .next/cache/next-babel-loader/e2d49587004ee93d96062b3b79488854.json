{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { euclideanDistance } from \"./util\";\nimport { DEFAULT_COVERAGE_RESOLUTION } from \"./constants\";\nimport * as h3 from \"h3-js\";\nimport * as dijkstrajs from \"dijkstrajs\";\nexport function computeShortestPath(pointA, pointB, positions, _ref) {\n  var _ref$links = _ref.links,\n    links = _ref$links === void 0 ? [] : _ref$links,\n    _ref$relays = _ref.relays,\n    relays = _ref$relays === void 0 ? [] : _ref$relays,\n    satellitesByCell = _ref.satellitesByCell,\n    _ref$resolution = _ref.resolution,\n    resolution = _ref$resolution === void 0 ? DEFAULT_COVERAGE_RESOLUTION : _ref$resolution;\n  function satellitesInRange(position) {\n    return satellitesByCell[h3.geoToH3(position.lat, position.lng, resolution)] || [];\n  }\n  positions = Object.create(positions);\n  positions[\"start\"] = _objectSpread(_objectSpread({}, pointA), {}, {\n    height: 0\n  });\n  positions[\"end\"] = _objectSpread(_objectSpread({}, pointB), {}, {\n    height: 0\n  });\n  var graph = {};\n  var addEdge = function addEdge(a, b) {\n    var cost = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    graph[a] = graph[a] || {};\n    graph[b] = graph[b] || {};\n    graph[a][b] = cost;\n  };\n\n  // TODO: satellitesByCell only satellites covering the center point of the cell\n  // to be more accurate we should check the actual distance (and expand to surrounding cells)\n  var _iterator = _createForOfIteratorHelper(satellitesInRange(positions[\"start\"])),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _sat = _step.value;\n      var _distance2 = euclideanDistance(positions[\"start\"], positions[_sat]);\n      addEdge(\"start\", _sat, _distance2);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var _iterator2 = _createForOfIteratorHelper(satellitesInRange(positions[\"end\"])),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _sat2 = _step2.value;\n      var _distance3 = euclideanDistance(positions[\"end\"], positions[_sat2]);\n      addEdge(_sat2, \"end\", _distance3);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var _iterator3 = _createForOfIteratorHelper(links),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n        a = _step3$value[0],\n        b = _step3$value[1];\n      var _distance4 = euclideanDistance(positions[a], positions[b]);\n      addEdge(a, b, _distance4);\n      addEdge(b, a, _distance4);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  for (var _i = 0, _Object$entries = Object.entries(relays); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      index = _Object$entries$_i[0],\n      relay = _Object$entries$_i[1];\n    positions[\"relay-\".concat(index)] = relay;\n    var _iterator4 = _createForOfIteratorHelper(satellitesInRange(relay)),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var sat = _step4.value;\n        var _distance = euclideanDistance(relay, positions[sat]);\n        addEdge(\"relay-\".concat(index), sat, _distance);\n        addEdge(sat, \"relay-\".concat(index), _distance);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n  var path = dijkstrajs.find_path(graph, \"start\", \"end\");\n  var pathPositions = [];\n  var distance = 0;\n  var prev = null;\n  var _iterator5 = _createForOfIteratorHelper(path),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var id = _step5.value;\n      pathPositions.push(positions[id]);\n      var _index = pathPositions.length - 1;\n      if (_index > 0) {\n        distance += euclideanDistance(pathPositions[_index], pathPositions[_index - 1]);\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return {\n    path: path,\n    positions: pathPositions,\n    distance: distance,\n    latency: distance / 300000 * 1000\n  };\n}","map":null,"metadata":{},"sourceType":"module"}