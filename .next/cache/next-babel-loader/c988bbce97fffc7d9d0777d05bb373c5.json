{"ast":null,"code":"var __jsx = React.createElement;\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport React from \"react\";\nimport { Setting, SettingCheckbox, SettingNumber } from \"../components/settings\";\nimport * as THREE from \"three\";\nimport { EARTH_RADIUS_KM } from \"../constants\";\nexport const DEFAULT_ROUTING_CONFIG = {\n  use_laser_links: true,\n  use_gateways: true,\n  // new york\n  pointA: {\n    lat: 40.7128,\n    lng: -74.006\n  },\n  // london\n  // pointB: {\n  //   lat: 51.5074,\n  //   lng: -0.1278,\n  // },\n  // san francisco\n  pointB: {\n    lat: 37.7749,\n    lng: -122.4194\n  }\n};\nexport default {\n  key: \"routing\",\n  name: \"Routes\",\n  defaultConfig: DEFAULT_ROUTING_CONFIG,\n  objects({\n    satellites,\n    config\n  }) {\n    const pointA = config.layers.routing.pointA;\n    const pointB = config.layers.routing.pointB;\n    const path = [_objectSpread(_objectSpread({}, pointA), {}, {\n      height: 0\n    }), _objectSpread(_objectSpread({}, pointA), {}, {\n      height: 550\n    }), _objectSpread(_objectSpread({}, pointB), {}, {\n      height: 550\n    }), _objectSpread(_objectSpread({}, pointB), {}, {\n      height: 0\n    })];\n    return [{\n      type: \"routing\",\n      sub_type: \"pointA\"\n    }, {\n      type: \"routing\",\n      sub_type: \"pointB\"\n    }, {\n      type: \"routing\",\n      sub_type: \"path\",\n      path\n    }];\n  },\n  create(globe, d, globeRadius) {\n    if (d.sub_type === \"pointA\" || d.sub_type === \"pointB\") {\n      return new THREE.Mesh(new THREE.SphereBufferGeometry(1), new THREE.MeshPhongMaterial({\n        color: \"blue\"\n      }));\n    } else if (d.sub_type === \"path\") {\n      return new THREE.Line(new THREE.BufferGeometry(), new THREE.LineBasicMaterial({\n        color: \"blue\"\n      }));\n    }\n  },\n  update(globe, d, obj) {\n    if (d.sub_type === \"pointA\" || d.sub_type === \"pointB\") {\n      const point = globe.config.layers.routing[d.sub_type];\n      Object.assign(obj.position, globe.getCoords(point.lat, point.lng, 0));\n    } else if (d.sub_type === \"path\") {\n      const pathPositions = globe.route ? globe.route.positions : [];\n      const positions = new Float32Array(pathPositions.length * 3);\n      let index = 0;\n      for (const position of pathPositions) {\n        const {\n          x,\n          y,\n          z\n        } = globe.getCoords(position.lat, position.lng, (position.height || 0) / EARTH_RADIUS_KM);\n        positions[index++] = x;\n        positions[index++] = y;\n        positions[index++] = z;\n      }\n      obj.geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    }\n  },\n  renderSettings({\n    config,\n    checkboxConfig,\n    inputConfig\n  }) {\n    return __jsx(\"div\", null, config.satellitesType === \"generated\" && __jsx(Setting, {\n      title: \"Laser Links\"\n    }, __jsx(SettingCheckbox, checkboxConfig([\"layers\", \"routing\", \"use_laser_links\"]))), __jsx(Setting, {\n      title: \"Ground Stations\"\n    }, __jsx(SettingCheckbox, checkboxConfig([\"layers\", \"routing\", \"use_gateways\"]))), __jsx(Setting, {\n      title: \"Start\"\n    }, __jsx(SettingLatLng, _extends({\n      direction: \"lat\"\n    }, inputConfig([\"layers\", \"routing\", \"pointA\", \"lat\"]))), __jsx(SettingLatLng, _extends({\n      direction: \"lng\"\n    }, inputConfig([\"layers\", \"routing\", \"pointA\", \"lng\"])))), __jsx(Setting, {\n      title: \"End\"\n    }, __jsx(SettingLatLng, _extends({\n      direction: \"lat\"\n    }, inputConfig([\"layers\", \"routing\", \"pointB\", \"lat\"]))), __jsx(SettingLatLng, _extends({\n      direction: \"lng\"\n    }, inputConfig([\"layers\", \"routing\", \"pointB\", \"lng\"])))));\n  }\n};\nfunction SettingLatLng(_ref) {\n  let {\n      direction\n    } = _ref,\n    props = _objectWithoutProperties(_ref, [\"direction\"]);\n  return __jsx(\"span\", null, __jsx(SettingNumber, _extends({\n    style: {\n      maxWidth: 100\n    },\n    className: \"ml-1\"\n  }, props)), __jsx(\"span\", {\n    className: \"ml-1 mr-1\"\n  }, \"\\xB0\", direction === \"lat\" ? props.value < 0 ? \"S\" : \"N\" : props.value < 0 ? \"W\" : \"E\"));\n}","map":null,"metadata":{},"sourceType":"module"}