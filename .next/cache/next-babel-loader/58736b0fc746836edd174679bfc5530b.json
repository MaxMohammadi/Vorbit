{"ast":null,"code":"import * as satellite from \"satellite.js\";\nimport { getSatelliteCoverageRadius } from \"./coverage\";\nimport { EARTH_MASS_KG, EARTH_RADIUS_M, G } from \"./constants\";\nexport function getSatellitePosition(sat) {\n  var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref$elevation = _ref.elevation,\n    elevation = _ref$elevation === void 0 ? null : _ref$elevation;\n  var positionAndVelocity = satellite.propagate(sat.satrec, time);\n  if (!positionAndVelocity.position) {\n    return;\n  }\n  var positionGd = satellite.eciToGeodetic(positionAndVelocity.position, satellite.gstime(time));\n  var lng = positionGd.longitude * 180 / Math.PI;\n  var lat = positionGd.latitude * 180 / Math.PI;\n  var height = positionGd.height;\n  var coverageRadius = elevation != null ? getSatelliteCoverageRadius(height, elevation) : null;\n  return {\n    sat: sat,\n    lng: lng,\n    lat: lat,\n    height: height,\n    coverageRadius: coverageRadius\n  };\n}\nexport function getSatellitePositions(sats) {\n  var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref2$elevation = _ref2.elevation,\n    elevation = _ref2$elevation === void 0 ? null : _ref2$elevation;\n  return sats.map(function (sat) {\n    return getSatellitePosition(sat, time, {\n      elevation: elevation\n    });\n  }).filter(function (x) {\n    return x;\n  });\n}\nexport function orbitalPeriod(height) {\n  // https://www.physicsclassroom.com/class/circles/Lesson-4/Mathematics-of-Satellite-Motion\n  var R = EARTH_RADIUS_M + height * 1000;\n  return Math.sqrt(4 * Math.pow(Math.PI, 2) / (G * EARTH_MASS_KG) * Math.pow(R, 3));\n}\nexport function meanMotionRadPerMinute(height) {\n  var seconds = orbitalPeriod(height);\n  return 2 * Math.PI / (seconds / 60);\n}","map":{"version":3,"names":["satellite","getSatelliteCoverageRadius","EARTH_MASS_KG","EARTH_RADIUS_M","G","getSatellitePosition","sat","time","arguments","length","undefined","Date","_ref","_ref$elevation","elevation","positionAndVelocity","propagate","satrec","position","positionGd","eciToGeodetic","gstime","lng","longitude","Math","PI","lat","latitude","height","coverageRadius","getSatellitePositions","sats","_ref2","_ref2$elevation","map","filter","x","orbitalPeriod","R","sqrt","pow","meanMotionRadPerMinute","seconds"],"sources":["/Users/maxmohammadi/Vorbit-Space/src/satellites.ts"],"sourcesContent":["import * as satellite from \"satellite.js\";\nimport { getSatelliteCoverageRadius } from \"./coverage\";\nimport { EARTH_RADIUS_KM, EARTH_MASS_KG, EARTH_RADIUS_M, G } from \"./constants\";\n\nexport function getSatellitePosition(\n  sat,\n  time = new Date(),\n  { elevation = null } = {}\n) {\n  const positionAndVelocity = satellite.propagate(sat.satrec, time);\n  if (!positionAndVelocity.position) {\n    return;\n  }\n  const positionGd = satellite.eciToGeodetic(\n    positionAndVelocity.position,\n    satellite.gstime(time)\n  );\n  const lng = (positionGd.longitude * 180) / Math.PI;\n  const lat = (positionGd.latitude * 180) / Math.PI;\n  const height = positionGd.height;\n  const coverageRadius =\n    elevation != null ? getSatelliteCoverageRadius(height, elevation) : null;\n\n  return { sat, lng, lat, height, coverageRadius };\n}\n\nexport function getSatellitePositions(\n  sats,\n  time = new Date(),\n  { elevation = null } = {}\n) {\n  return sats\n    .map((sat) => getSatellitePosition(sat, time, { elevation }))\n    .filter((x) => x);\n}\n\nexport function orbitalPeriod(height) {\n  // https://www.physicsclassroom.com/class/circles/Lesson-4/Mathematics-of-Satellite-Motion\n  const R = EARTH_RADIUS_M + height * 1000;\n  return Math.sqrt(\n    ((4 * Math.pow(Math.PI, 2)) / (G * EARTH_MASS_KG)) * Math.pow(R, 3)\n  );\n}\n\nexport function meanMotionRadPerMinute(height) {\n  const seconds = orbitalPeriod(height);\n  return (2 * Math.PI) / (seconds / 60);\n}\n"],"mappings":"AAAA,OAAO,KAAKA,SAAS,MAAM,cAAc;AACzC,SAASC,0BAA0B,QAAQ,YAAY;AACvD,SAA0BC,aAAa,EAAEC,cAAc,EAAEC,CAAC,QAAQ,aAAa;AAE/E,OAAO,SAASC,oBAAoBA,CAClCC,GAAG,EAGH;EAAA,IAFAC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAIG,IAAI,EAAE;EAAA,IAAAC,IAAA,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MACM,CAAC,CAAC;IAAAK,cAAA,GAAAD,IAAA,CAAvBE,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAG,IAAI,GAAAA,cAAA;EAElB,IAAME,mBAAmB,GAAGf,SAAS,CAACgB,SAAS,CAACV,GAAG,CAACW,MAAM,EAAEV,IAAI,CAAC;EACjE,IAAI,CAACQ,mBAAmB,CAACG,QAAQ,EAAE;IACjC;EACF;EACA,IAAMC,UAAU,GAAGnB,SAAS,CAACoB,aAAa,CACxCL,mBAAmB,CAACG,QAAQ,EAC5BlB,SAAS,CAACqB,MAAM,CAACd,IAAI,CAAC,CACvB;EACD,IAAMe,GAAG,GAAIH,UAAU,CAACI,SAAS,GAAG,GAAG,GAAIC,IAAI,CAACC,EAAE;EAClD,IAAMC,GAAG,GAAIP,UAAU,CAACQ,QAAQ,GAAG,GAAG,GAAIH,IAAI,CAACC,EAAE;EACjD,IAAMG,MAAM,GAAGT,UAAU,CAACS,MAAM;EAChC,IAAMC,cAAc,GAClBf,SAAS,IAAI,IAAI,GAAGb,0BAA0B,CAAC2B,MAAM,EAAEd,SAAS,CAAC,GAAG,IAAI;EAE1E,OAAO;IAAER,GAAG,EAAHA,GAAG;IAAEgB,GAAG,EAAHA,GAAG;IAAEI,GAAG,EAAHA,GAAG;IAAEE,MAAM,EAANA,MAAM;IAAEC,cAAc,EAAdA;EAAe,CAAC;AAClD;AAEA,OAAO,SAASC,qBAAqBA,CACnCC,IAAI,EAGJ;EAAA,IAFAxB,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAIG,IAAI,EAAE;EAAA,IAAAqB,KAAA,GAAAxB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MACM,CAAC,CAAC;IAAAyB,eAAA,GAAAD,KAAA,CAAvBlB,SAAS;IAATA,SAAS,GAAAmB,eAAA,cAAG,IAAI,GAAAA,eAAA;EAElB,OAAOF,IAAI,CACRG,GAAG,CAAC,UAAC5B,GAAG;IAAA,OAAKD,oBAAoB,CAACC,GAAG,EAAEC,IAAI,EAAE;MAAEO,SAAS,EAATA;IAAU,CAAC,CAAC;EAAA,EAAC,CAC5DqB,MAAM,CAAC,UAACC,CAAC;IAAA,OAAKA,CAAC;EAAA,EAAC;AACrB;AAEA,OAAO,SAASC,aAAaA,CAACT,MAAM,EAAE;EACpC;EACA,IAAMU,CAAC,GAAGnC,cAAc,GAAGyB,MAAM,GAAG,IAAI;EACxC,OAAOJ,IAAI,CAACe,IAAI,CACZ,CAAC,GAAGf,IAAI,CAACgB,GAAG,CAAChB,IAAI,CAACC,EAAE,EAAE,CAAC,CAAC,IAAKrB,CAAC,GAAGF,aAAa,CAAC,GAAIsB,IAAI,CAACgB,GAAG,CAACF,CAAC,EAAE,CAAC,CAAC,CACpE;AACH;AAEA,OAAO,SAASG,sBAAsBA,CAACb,MAAM,EAAE;EAC7C,IAAMc,OAAO,GAAGL,aAAa,CAACT,MAAM,CAAC;EACrC,OAAQ,CAAC,GAAGJ,IAAI,CAACC,EAAE,IAAKiB,OAAO,GAAG,EAAE,CAAC;AACvC"},"metadata":{},"sourceType":"module"}