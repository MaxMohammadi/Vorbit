{"ast":null,"code":"var __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from \"react\";\nimport { Setting, SettingCheckbox, SettingNumber } from \"../components/settings\";\nimport * as THREE from \"three\";\nimport { EARTH_RADIUS_KM } from \"../constants\";\nimport * as _ from \"lodash\";\nexport const DEFAULT_LASER_CONFIG = {\n  link_forward: true,\n  link_side: true,\n  link_side_offset: 0\n};\nconst getPlanesIndex = _.memoize(satellites => {\n  const planes = [];\n  for (let i = 0; i < satellites.length - 1; i++) {\n    const sat = satellites[i];\n    (planes[sat.plane] = planes[sat.plane] || [])[sat.index] = i;\n  }\n  return planes;\n});\nfunction neighborSatelliteIndex(satellites, satellite, satOffset = 0, planeOffset = 0) {\n  const planes = getPlanesIndex(satellites);\n  const plane = planes[(satellite.plane + planeOffset) % planes.length];\n  const nextIndex = plane[(satellite.index + satOffset) % plane.length];\n  return nextIndex;\n}\nfunction laserLinksForSatellite(satellite, index, satellites, {\n  link_forward = DEFAULT_LASER_CONFIG.link_forward,\n  link_side = DEFAULT_LASER_CONFIG.link_side,\n  link_side_offset = DEFAULT_LASER_CONFIG.link_side_offset\n} = {}) {\n  let indexes = [];\n  if (satellite.plane != null) {\n    indexes = [];\n    if (link_forward) {\n      // NOTE: doesn't make sense to allow configuring of offset for links in same orbital plane\n      indexes.push(neighborSatelliteIndex(satellites, satellite, 1, 0));\n    }\n    if (link_side) {\n      const offset = link_side_offset;\n      indexes.push(neighborSatelliteIndex(satellites, satellite, offset, 1));\n    }\n  }\n  return indexes.map(other => [index, other]);\n}\nexport function laserLinksForSatellites(satellites, laserConfig = {}) {\n  return satellites.map((sat, index) => laserLinksForSatellite(sat, index, satellites, laserConfig)).flat();\n}\nexport default {\n  key: \"laser\",\n  name: \"Laser Links\",\n  defaultConfig: DEFAULT_LASER_CONFIG,\n  objects({\n    laserLinks\n  }) {\n    return laserLinks.map(satelliteIndexes => ({\n      type: \"laser\",\n      satelliteIndexes: satelliteIndexes\n    }));\n  },\n  create(globe, d, globeRadius) {\n    const geometry = new THREE.BufferGeometry();\n    const positions = new Float32Array(2 * 3);\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    var material = new THREE.LineBasicMaterial({\n      color: 0xff0000\n    });\n    return new THREE.Line(geometry, material);\n  },\n  update(globe, d, obj) {\n    var array = obj.geometry.attributes.position.array;\n    let index = 0;\n    for (const position of d.positions || []) {\n      if (!position) {\n        return;\n      }\n      const {\n        x,\n        y,\n        z\n      } = globe.getCoords(position.lat, position.lng, position.height / EARTH_RADIUS_KM);\n      array[index++] = x;\n      array[index++] = y;\n      array[index++] = z;\n    }\n    obj.geometry.attributes.position.needsUpdate = true;\n  },\n  // settings\n  canEnable(config) {\n    return config.satellitesType === \"generated\";\n  },\n  renderSettings({\n    getConfig,\n    checkboxConfig,\n    inputConfig\n  }) {\n    return __jsx(\"div\", null, __jsx(Setting, {\n      title: \"Forward Links\"\n    }, __jsx(SettingCheckbox, checkboxConfig([\"layers\", \"laser\", \"link_forward\"]))), __jsx(Setting, {\n      title: \"Side Links\"\n    }, __jsx(SettingCheckbox, checkboxConfig([\"layers\", \"laser\", \"link_side\"]))), getConfig([\"layers\", \"laser\", \"link_side\"]) && __jsx(Setting, {\n      title: \"Side Link Offset\"\n    }, __jsx(SettingNumber, _extends({\n      min: -5,\n      max: 5\n    }, inputConfig([\"layers\", \"laser\", \"link_side_offset\"])))));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}