{"ast":null,"code":"var _jsxFileName = \"/Users/maxmohammadi/Vorbit-Space/src/layers/coverage_average.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as THREE from \"three\";\nimport chroma from \"chroma-js\";\nimport * as h3 from \"h3-js\";\nimport * as _ from \"lodash\";\nimport { Setting, SettingNumber } from \"../components/settings\";\nconst getCoverageObject = _.memoize(cell => ({\n  type: \"coverage\",\n  cell: cell\n}));\nexport default {\n  name: \"Coverage (Average)\",\n  defaultConfig: {\n    enabled: false,\n    resolution: 2\n  },\n  objects({\n    cells\n  }) {\n    return cells.map(cell => getCoverageObject(cell));\n  },\n  create(globe, d, globeRadius) {\n    const color = cellColor(globe, d.cell);\n    const center = cellCenter(globe, d.cell);\n    const corners = cellCorners(globe, d.cell);\n    if (false) {\n      const geometry = new THREE.BufferGeometry().setFromPoints(corners);\n      const material = new THREE.LineBasicMaterial({\n        color\n      });\n      return new THREE.Line(geometry, material);\n    } else {\n      const geometry = new THREE.Geometry();\n      geometry.vertices.push(center, ...corners);\n      for (let i = 0; i < corners.length - 1; i++) {\n        geometry.faces.push(new THREE.Face3(0, i + 1, i + 2));\n      }\n      geometry.computeFaceNormals();\n      const material = new THREE.MeshBasicMaterial({\n        color: color,\n        opacity: 0.25,\n        transparent: true\n      });\n      return new THREE.Mesh(geometry, material);\n\n      // const geometry = new THREE.Geometry();\n      // addCoverageFace(geometry, globe, d.cell);\n      // geometry.computeFaceNormals();\n      // const material = new THREE.MeshPhongMaterial({\n      //   opacity: 0.25,\n      //   transparent: true,\n      //   vertexColors: true,\n      // });\n      // return new THREE.Mesh(geometry, material);\n    }\n  },\n\n  update(globe, d, obj) {\n    obj.material.color.set(cellColor(globe, d.cell));\n    // obj.material.color.set(Math.random() < 0.5 ? \"red\" : \"green\");\n  },\n\n  renderSettings({\n    inputConfig\n  }) {\n    return __jsx(Setting, {\n      title: \"Resolution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, __jsx(SettingNumber, _extends({\n      min: 1,\n      max: 3\n    }, inputConfig([\"layers\", \"coverage\", \"resolution\"]), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    })));\n  }\n};\nconst colorScale = chroma.scale(\"RdYlBu\").domain([0, 1]);\nfunction positionToVector3(globe, [lng, lat], altitude = 0.01) {\n  const {\n    x,\n    y,\n    z\n  } = globe.getCoords(lat, lng, altitude);\n  return new THREE.Vector3(x, y, z);\n}\nfunction cellCorners(globe, cell) {\n  return h3.h3ToGeoBoundary(cell, true).map(bound => positionToVector3(globe, bound));\n}\nfunction cellCenter(globe, cell) {\n  const centerCoords = globe.getCoords(...h3.h3ToGeo(cell), 0.01);\n  return new THREE.Vector3(centerCoords.x, centerCoords.y, centerCoords.z);\n}\nfunction cellColor(globe, cell) {\n  return new THREE.Color(colorScale(globe.coverage[cell]).hex());\n}\nfunction createCoverageMesh(globe, cells) {\n  const geometry = new THREE.Geometry();\n  for (const cell of cells) {\n    addCoverageFace(geometry, globe, cell);\n  }\n  geometry.computeFaceNormals();\n  const material = new THREE.MeshPhongMaterial({\n    opacity: 0.25,\n    transparent: true,\n    vertexColors: true\n  });\n  return new THREE.Mesh(geometry, material);\n}\nfunction addCoverageFace(geometry, globe, cell) {\n  const color = cellColor(globe, cell);\n  const center = cellCenter(globe, cell);\n  const corners = cellCorners(globe, cell);\n  const vertexOffset = geometry.vertices.length;\n  geometry.vertices.push(center, ...corners);\n  for (let i = 0; i < corners.length - 1; i++) {\n    geometry.faces.push(new THREE.Face3(vertexOffset, vertexOffset + i + 1, vertexOffset + i + 2, null, color));\n  }\n}","map":{"version":3,"names":["THREE","chroma","h3","_","Setting","SettingNumber","getCoverageObject","memoize","cell","type","name","defaultConfig","enabled","resolution","objects","cells","map","create","globe","d","globeRadius","color","cellColor","center","cellCenter","corners","cellCorners","geometry","BufferGeometry","setFromPoints","material","LineBasicMaterial","Line","Geometry","vertices","push","i","length","faces","Face3","computeFaceNormals","MeshBasicMaterial","opacity","transparent","Mesh","update","obj","set","renderSettings","inputConfig","__jsx","title","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_extends","min","max","colorScale","scale","domain","positionToVector3","lng","lat","altitude","x","y","z","getCoords","Vector3","h3ToGeoBoundary","bound","centerCoords","h3ToGeo","Color","coverage","hex","createCoverageMesh","addCoverageFace","MeshPhongMaterial","vertexColors","vertexOffset"],"sources":["/Users/maxmohammadi/Vorbit-Space/src/layers/coverage_average.tsx"],"sourcesContent":["import * as THREE from \"three\";\n\nimport chroma from \"chroma-js\";\nimport * as h3 from \"h3-js\";\nimport * as _ from \"lodash\";\n\nimport { Setting, SettingNumber } from \"../components/settings\";\n\nconst getCoverageObject = _.memoize((cell) => ({\n  type: \"coverage\",\n  cell: cell,\n}));\n\nexport default {\n  name: \"Coverage (Average)\",\n  defaultConfig: {\n    enabled: false,\n    resolution: 2,\n  },\n  objects({ cells }) {\n    return cells.map((cell) => getCoverageObject(cell));\n  },\n  create(globe, d, globeRadius) {\n    const color = cellColor(globe, d.cell);\n    const center = cellCenter(globe, d.cell);\n    const corners = cellCorners(globe, d.cell);\n\n    if (false) {\n      const geometry = new THREE.BufferGeometry().setFromPoints(corners);\n      const material = new THREE.LineBasicMaterial({ color });\n      return new THREE.Line(geometry, material);\n    } else {\n      const geometry = new THREE.Geometry();\n      geometry.vertices.push(center, ...corners);\n      for (let i = 0; i < corners.length - 1; i++) {\n        geometry.faces.push(new THREE.Face3(0, i + 1, i + 2));\n      }\n      geometry.computeFaceNormals();\n      const material = new THREE.MeshBasicMaterial({\n        color: color,\n        opacity: 0.25,\n        transparent: true,\n      });\n      return new THREE.Mesh(geometry, material);\n\n      // const geometry = new THREE.Geometry();\n      // addCoverageFace(geometry, globe, d.cell);\n      // geometry.computeFaceNormals();\n      // const material = new THREE.MeshPhongMaterial({\n      //   opacity: 0.25,\n      //   transparent: true,\n      //   vertexColors: true,\n      // });\n      // return new THREE.Mesh(geometry, material);\n    }\n  },\n\n  update(globe, d, obj) {\n    obj.material.color.set(cellColor(globe, d.cell));\n    // obj.material.color.set(Math.random() < 0.5 ? \"red\" : \"green\");\n  },\n\n  renderSettings({ inputConfig }) {\n    return (\n      <Setting title=\"Resolution\">\n        <SettingNumber\n          min={1}\n          max={3}\n          {...inputConfig([\"layers\", \"coverage\", \"resolution\"])}\n        />\n      </Setting>\n    );\n  },\n};\n\nconst colorScale = chroma.scale(\"RdYlBu\").domain([0, 1]);\n\nfunction positionToVector3(\n  globe,\n  [lng, lat]: [number, number],\n  altitude = 0.01\n) {\n  const { x, y, z } = globe.getCoords(lat, lng, altitude);\n  return new THREE.Vector3(x, y, z);\n}\n\nfunction cellCorners(globe, cell) {\n  return h3\n    .h3ToGeoBoundary(cell, true)\n    .map((bound) => positionToVector3(globe, bound));\n}\nfunction cellCenter(globe, cell) {\n  const centerCoords = globe.getCoords(...h3.h3ToGeo(cell), 0.01);\n  return new THREE.Vector3(centerCoords.x, centerCoords.y, centerCoords.z);\n}\n\nfunction cellColor(globe, cell) {\n  return new THREE.Color(colorScale(globe.coverage[cell]).hex());\n}\n\nfunction createCoverageMesh(globe, cells) {\n  const geometry = new THREE.Geometry();\n  for (const cell of cells) {\n    addCoverageFace(geometry, globe, cell);\n  }\n  geometry.computeFaceNormals();\n  const material = new THREE.MeshPhongMaterial({\n    opacity: 0.25,\n    transparent: true,\n    vertexColors: true,\n  });\n  return new THREE.Mesh(geometry, material);\n}\n\nfunction addCoverageFace(geometry, globe, cell) {\n  const color = cellColor(globe, cell);\n  const center = cellCenter(globe, cell);\n  const corners = cellCorners(globe, cell);\n  const vertexOffset = geometry.vertices.length;\n  geometry.vertices.push(center, ...corners);\n  for (let i = 0; i < corners.length - 1; i++) {\n    geometry.faces.push(\n      new THREE.Face3(\n        vertexOffset,\n        vertexOffset + i + 1,\n        vertexOffset + i + 2,\n        null,\n        color\n      )\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}