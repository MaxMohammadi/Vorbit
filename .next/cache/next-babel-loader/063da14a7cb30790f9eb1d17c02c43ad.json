{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { euclideanDistance } from \"./util\";\nimport { DEFAULT_COVERAGE_RESOLUTION } from \"./constants\";\nimport * as h3 from \"h3-js\";\nimport * as dijkstrajs from \"dijkstrajs\";\nexport function computeShortestPath(pointA, pointB, positions, _ref) {\n  var _ref$links = _ref.links,\n    links = _ref$links === void 0 ? [] : _ref$links,\n    _ref$relays = _ref.relays,\n    relays = _ref$relays === void 0 ? [] : _ref$relays,\n    satellitesByCell = _ref.satellitesByCell,\n    _ref$resolution = _ref.resolution,\n    resolution = _ref$resolution === void 0 ? DEFAULT_COVERAGE_RESOLUTION : _ref$resolution;\n  function satellitesInRange(position) {\n    return satellitesByCell[h3.geoToH3(position.lat, position.lng, resolution)] || [];\n  }\n  positions = Object.create(positions);\n  positions[\"start\"] = _objectSpread(_objectSpread({}, pointA), {}, {\n    height: 0\n  });\n  positions[\"end\"] = _objectSpread(_objectSpread({}, pointB), {}, {\n    height: 0\n  });\n  var graph = {};\n  var addEdge = function addEdge(a, b) {\n    var cost = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    graph[a] = graph[a] || {};\n    graph[b] = graph[b] || {};\n    graph[a][b] = cost;\n  };\n\n  // TODO: satellitesByCell only satellites covering the center point of the cell\n  // to be more accurate we should check the actual distance (and expand to surrounding cells)\n  var _iterator = _createForOfIteratorHelper(satellitesInRange(positions[\"start\"])),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _sat = _step.value;\n      var _distance2 = euclideanDistance(positions[\"start\"], positions[_sat]);\n      addEdge(\"start\", _sat, _distance2);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var _iterator2 = _createForOfIteratorHelper(satellitesInRange(positions[\"end\"])),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _sat2 = _step2.value;\n      var _distance3 = euclideanDistance(positions[\"end\"], positions[_sat2]);\n      addEdge(_sat2, \"end\", _distance3);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var _iterator3 = _createForOfIteratorHelper(links),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n        a = _step3$value[0],\n        b = _step3$value[1];\n      var _distance4 = euclideanDistance(positions[a], positions[b]);\n      addEdge(a, b, _distance4);\n      addEdge(b, a, _distance4);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  for (var _i = 0, _Object$entries = Object.entries(relays); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      index = _Object$entries$_i[0],\n      relay = _Object$entries$_i[1];\n    positions[\"relay-\".concat(index)] = relay;\n    var _iterator4 = _createForOfIteratorHelper(satellitesInRange(relay)),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var sat = _step4.value;\n        var _distance = euclideanDistance(relay, positions[sat]);\n        addEdge(\"relay-\".concat(index), sat, _distance);\n        addEdge(sat, \"relay-\".concat(index), _distance);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n  var path = dijkstrajs.find_path(graph, \"start\", \"end\");\n  var pathPositions = [];\n  var distance = 0;\n  var prev = null;\n  var _iterator5 = _createForOfIteratorHelper(path),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var id = _step5.value;\n      pathPositions.push(positions[id]);\n      var _index = pathPositions.length - 1;\n      if (_index > 0) {\n        distance += euclideanDistance(pathPositions[_index], pathPositions[_index - 1]);\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return {\n    path: path,\n    positions: pathPositions,\n    distance: distance,\n    latency: distance / 300000 * 1000\n  };\n}","map":{"version":3,"names":["euclideanDistance","DEFAULT_COVERAGE_RESOLUTION","h3","dijkstrajs","computeShortestPath","pointA","pointB","positions","_ref","_ref$links","links","_ref$relays","relays","satellitesByCell","_ref$resolution","resolution","satellitesInRange","position","geoToH3","lat","lng","Object","create","_objectSpread","height","graph","addEdge","a","b","cost","arguments","length","undefined","_iterator","_createForOfIteratorHelper","_step","s","n","done","sat","value","distance","err","e","f","_iterator2","_step2","_iterator3","_step3","_step3$value","_slicedToArray","_i","_Object$entries","entries","_Object$entries$_i","index","relay","concat","_iterator4","_step4","path","find_path","pathPositions","prev","_iterator5","_step5","id","push","latency"],"sources":["/Users/maxmohammadi/Vorbit-Space/src/routing.ts"],"sourcesContent":["import { euclideanDistance } from \"./util\";\nimport { DEFAULT_COVERAGE_RESOLUTION } from \"./constants\";\n\nimport * as _ from \"lodash\";\nimport * as h3 from \"h3-js\";\n\nimport * as dijkstrajs from \"dijkstrajs\";\n\nexport function computeShortestPath(\n  pointA,\n  pointB,\n  positions,\n  {\n    links = [],\n    relays = [],\n    satellitesByCell,\n    resolution = DEFAULT_COVERAGE_RESOLUTION,\n  }\n) {\n  function satellitesInRange(position) {\n    return (\n      satellitesByCell[h3.geoToH3(position.lat, position.lng, resolution)] || []\n    );\n  }\n\n  positions = Object.create(positions);\n  positions[\"start\"] = { ...pointA, height: 0 };\n  positions[\"end\"] = { ...pointB, height: 0 };\n\n  const graph = {};\n  const addEdge = (a, b, cost = 1) => {\n    graph[a] = graph[a] || {};\n    graph[b] = graph[b] || {};\n    graph[a][b] = cost;\n  };\n\n  // TODO: satellitesByCell only satellites covering the center point of the cell\n  // to be more accurate we should check the actual distance (and expand to surrounding cells)\n  for (const sat of satellitesInRange(positions[\"start\"])) {\n    const distance = euclideanDistance(positions[\"start\"], positions[sat]);\n    addEdge(\"start\", sat, distance);\n  }\n  for (const sat of satellitesInRange(positions[\"end\"])) {\n    const distance = euclideanDistance(positions[\"end\"], positions[sat]);\n    addEdge(sat, \"end\", distance);\n  }\n  for (const [a, b] of links) {\n    const distance = euclideanDistance(positions[a], positions[b]);\n    addEdge(a, b, distance);\n    addEdge(b, a, distance);\n  }\n  for (const [index, relay] of Object.entries(relays)) {\n    positions[`relay-${index}`] = relay;\n    for (const sat of satellitesInRange(relay)) {\n      const distance = euclideanDistance(relay, positions[sat]);\n      addEdge(`relay-${index}`, sat, distance);\n      addEdge(sat, `relay-${index}`, distance);\n    }\n  }\n\n  const path = dijkstrajs.find_path(graph, \"start\", \"end\");\n  const pathPositions = [];\n  let distance = 0;\n  let prev = null;\n  for (const id of path) {\n    pathPositions.push(positions[id]);\n    const index = pathPositions.length - 1;\n    if (index > 0) {\n      distance += euclideanDistance(\n        pathPositions[index],\n        pathPositions[index - 1]\n      );\n    }\n  }\n  return {\n    path,\n    positions: pathPositions,\n    distance,\n    latency: (distance / 300000) * 1000,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}