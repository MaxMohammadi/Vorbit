{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as THREE from \"three\";\nimport KDBush from \"kdbush\";\nimport * as geokdbush from \"geokdbush\";\nimport { Setting, SettingCheckbox } from \"../components/settings\";\nvar gateways = [];\nfetch(\"/starlink_gateways.json\").then(function (res) {\n  return res.json();\n}).then(function (g) {\n  gateways = g.map(function (gateway) {\n    var _gateway$coordinates = _slicedToArray(gateway.coordinates, 3),\n      lng = _gateway$coordinates[0],\n      lat = _gateway$coordinates[1],\n      height = _gateway$coordinates[2];\n    return _objectSpread(_objectSpread({}, gateway), {}, {\n      position: {\n        lat: lat,\n        lng: lng,\n        height: height\n      }\n    });\n  });\n});\nexport function getGateways(_ref) {\n  var inactive = _ref.inactive;\n  return gateways.filter(function (gateway) {\n    return gateway.active || inactive;\n  });\n}\nexport function getGatewaysIndex(gateways) {\n  return new KDBush(gateways, function (g) {\n    return g.position.lng;\n  }, function (g) {\n    return g.position.lat;\n  });\n}\nexport function getGatewaysAround(index, point, radius) {\n  return geokdbush.around(index, point.lng, point.lat, Infinity, radius);\n}\nexport default {\n  key: \"gateway\",\n  name: \"Ground Stations\",\n  defaultConfig: {\n    inactive: false\n  },\n  objects: function objects(_ref2) {\n    var satellites = _ref2.satellites,\n      config = _ref2.config;\n    return gateways.filter(function (gateway) {\n      return gateway.active || config.layers.gateway.inactive;\n    }).map(function (gateway) {\n      return {\n        type: \"gateway\",\n        gateway: gateway\n      };\n    });\n  },\n  create: function create(globe, d) {\n    return new THREE.Mesh(new THREE.SphereBufferGeometry(1), new THREE.MeshPhongMaterial({\n      color: d.gateway.active ? \"green\" : \"rgb(0,50,0)\"\n    }));\n  },\n  update: function update(globe, d, obj) {\n    var gateway = d.gateway;\n    var _gateway$position = gateway.position,\n      lng = _gateway$position.lng,\n      lat = _gateway$position.lat;\n    Object.assign(obj.position, globe.getCoords(lat, lng, 0));\n  },\n  renderSettings: function renderSettings(_ref3) {\n    var checkboxConfig = _ref3.checkboxConfig;\n    return __jsx(Setting, {\n      title: \"Include Inactive\"\n    }, __jsx(SettingCheckbox, checkboxConfig([\"layers\", \"gateway\", \"inactive\"])));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}