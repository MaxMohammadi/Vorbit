{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport React from \"react\";\nimport { Setting, SettingCheckbox, SettingNumber } from \"../components/settings\";\nimport * as THREE from \"three\";\nimport { EARTH_RADIUS_KM } from \"../constants\";\nimport * as _ from \"lodash\";\nexport var DEFAULT_LASER_CONFIG = {\n  link_forward: true,\n  link_side: true,\n  link_side_offset: 0\n};\nvar getPlanesIndex = _.memoize(function (satellites) {\n  var planes = [];\n  for (var i = 0; i < satellites.length - 1; i++) {\n    var sat = satellites[i];\n    (planes[sat.plane] = planes[sat.plane] || [])[sat.index] = i;\n  }\n  return planes;\n});\nfunction neighborSatelliteIndex(satellites, satellite) {\n  var satOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var planeOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var planes = getPlanesIndex(satellites);\n  var plane = planes[(satellite.plane + planeOffset) % planes.length];\n  var nextIndex = plane[(satellite.index + satOffset) % plane.length];\n  return nextIndex;\n}\nfunction laserLinksForSatellite(satellite, index, satellites) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n    _ref$link_forward = _ref.link_forward,\n    link_forward = _ref$link_forward === void 0 ? DEFAULT_LASER_CONFIG.link_forward : _ref$link_forward,\n    _ref$link_side = _ref.link_side,\n    link_side = _ref$link_side === void 0 ? DEFAULT_LASER_CONFIG.link_side : _ref$link_side,\n    _ref$link_side_offset = _ref.link_side_offset,\n    link_side_offset = _ref$link_side_offset === void 0 ? DEFAULT_LASER_CONFIG.link_side_offset : _ref$link_side_offset;\n  var indexes = [];\n  if (satellite.plane != null) {\n    indexes = [];\n    if (link_forward) {\n      // NOTE: doesn't make sense to allow configuring of offset for links in same orbital plane\n      indexes.push(neighborSatelliteIndex(satellites, satellite, 1, 0));\n    }\n    if (link_side) {\n      var offset = link_side_offset;\n      indexes.push(neighborSatelliteIndex(satellites, satellite, offset, 1));\n    }\n  }\n  return indexes.map(function (other) {\n    return [index, other];\n  });\n}\nexport function laserLinksForSatellites(satellites) {\n  var laserConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return satellites.map(function (sat, index) {\n    return laserLinksForSatellite(sat, index, satellites, laserConfig);\n  }).flat();\n}\nexport default {\n  key: \"laser\",\n  name: \"Laser Links\",\n  defaultConfig: DEFAULT_LASER_CONFIG,\n  objects: function objects(_ref2) {\n    var laserLinks = _ref2.laserLinks;\n    return laserLinks.map(function (satelliteIndexes) {\n      return {\n        type: \"laser\",\n        satelliteIndexes: satelliteIndexes\n      };\n    });\n  },\n  create: function create(globe, d, globeRadius) {\n    var geometry = new THREE.BufferGeometry();\n    var positions = new Float32Array(2 * 3);\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\n    var material = new THREE.LineBasicMaterial({\n      color: 0xff0000\n    });\n    return new THREE.Line(geometry, material);\n  },\n  update: function update(globe, d, obj) {\n    var array = obj.geometry.attributes.position.array;\n    var index = 0;\n    var _iterator = _createForOfIteratorHelper(d.positions || []),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var position = _step.value;\n        if (!position) {\n          return;\n        }\n        var _globe$getCoords = globe.getCoords(position.lat, position.lng, position.height / EARTH_RADIUS_KM),\n          x = _globe$getCoords.x,\n          y = _globe$getCoords.y,\n          z = _globe$getCoords.z;\n        array[index++] = x;\n        array[index++] = y;\n        array[index++] = z;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    obj.geometry.attributes.position.needsUpdate = true;\n  },\n  // settings\n  canEnable: function canEnable(config) {\n    return config.satellitesType === \"generated\";\n  },\n  renderSettings: function renderSettings(_ref3) {\n    var getConfig = _ref3.getConfig,\n      checkboxConfig = _ref3.checkboxConfig,\n      inputConfig = _ref3.inputConfig;\n    return __jsx(\"div\", null, __jsx(Setting, {\n      title: \"Forward Links\"\n    }, __jsx(SettingCheckbox, checkboxConfig([\"layers\", \"laser\", \"link_forward\"]))), __jsx(Setting, {\n      title: \"Side Links\"\n    }, __jsx(SettingCheckbox, checkboxConfig([\"layers\", \"laser\", \"link_side\"]))), getConfig([\"layers\", \"laser\", \"link_side\"]) && __jsx(Setting, {\n      title: \"Side Link Offset\"\n    }, __jsx(SettingNumber, _extends({\n      min: -5,\n      max: 5\n    }, inputConfig([\"layers\", \"laser\", \"link_side_offset\"])))));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}