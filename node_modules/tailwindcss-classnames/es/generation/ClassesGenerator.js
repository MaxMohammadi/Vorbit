import { __assign } from "tslib";
import { ConfigScanner } from './ConfigScanner';
import { generateOpacities } from './utils/utils';
import { AllClasses as defaultClasses, AllClassesFlat } from './default-classes/all';
import { allTransformClasses } from './default-classes/Transforms';
import _ from 'lodash';
import { ClassesGroupTemplateGenerator } from './ClassesGroupTemplateGenerator';
var ClassesGenerator = /** @class */ (function () {
    function ClassesGenerator(tailwindConfig) {
        var _this = this;
        this.generate = function () {
            var allTemplates = Object.keys(_this.allGeneratedClasses).map(function (classGroup) {
                return new ClassesGroupTemplateGenerator(
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                _this.allGeneratedClasses[classGroup], classGroup, _this.prefix).generate();
            });
            return allTemplates.join('\n');
        };
        this.layout = function () {
            return __assign(__assign({}, defaultClasses.Layout), { objectPosition: Object.keys(_this.theme.objectPosition).map(function (x) { return 'object-' + x; }), topRightBottomLeft: Object.keys(_this.theme.inset).flatMap(function (insetValue) {
                    return ['inset', 'inset-x', 'inset-y', 'top', 'right', 'bottom', 'left'].map(function (side) {
                        return insetValue.startsWith('-')
                            ? "-" + side + "-" + insetValue.substring(1)
                            : side + "-" + insetValue;
                    });
                }), zIndex: Object.keys(_this.theme.zIndex).flatMap(function (zIndexValue) {
                    return zIndexValue.startsWith('-') ? "-z-" + zIndexValue.substring(1) : "z-" + zIndexValue;
                }) });
        };
        this.backgrounds = function () {
            return __assign(__assign({}, defaultClasses.Backgrounds), { backgroundOpacity: _this.getGeneratedClassesWithOpacities().backgroundOpacities, backgroundColor: _this.getGeneratedClassesWithColors('bg'), backgroundPosition: Object.keys(_this.theme.backgroundPosition).map(function (x) { return 'bg-' + x; }), backgroundSize: Object.keys(_this.theme.backgroundSize).map(function (x) { return 'bg-' + x; }) });
        };
        this.borders = function () {
            return __assign(__assign({}, defaultClasses.Borders), { borderColor: _this.getGeneratedClassesWithColors('border'), borderOpacity: _this.getGeneratedClassesWithOpacities().borderOpacities, borderRadius: Object.keys(_this.theme.borderRadius).flatMap(function (radius) {
                    var sides = ['', 't', 'r', 'b', 'l', 'tr', 'tl', 'br', 'bl'];
                    return sides.map(function (side) {
                        return "rounded" + (side === '' ? '' : '-' + side) + (radius === 'default' ? '' : "-" + radius);
                    });
                }), borderWidth: Object.keys(_this.theme.borderWidth).flatMap(function (width) {
                    var sides = ['', 't', 'r', 'b', 'l'];
                    return sides.map(function (side) {
                        return "border" + (side === '' ? '' : '-' + side) + (width === 'default' ? '' : "-" + width);
                    });
                }), divideColor: _this.getGeneratedClassesWithColors('divide'), divideOpacity: _this.getGeneratedClassesWithOpacities().divideOpacities, 
                // divide width inherits its values from theme.borderWidth by default
                // but theme.divideWidth overrides it.
                divideWidth: Object.keys(_.isEmpty(_this.theme.divideWidth)
                    ? _this.theme.borderWidth
                    : _this.theme.divideWidth)
                    .concat('reverse')
                    .flatMap(function (width) {
                    return ['x', 'y'].map(function (axis) { return "divide-" + axis + (width === 'default' ? '' : "-" + width); });
                }) });
        };
        this.tables = function () {
            return defaultClasses.Tables;
        };
        this.effects = function () {
            return __assign(__assign({}, defaultClasses.Effects), { boxShadow: Object.keys(_this.theme.boxShadow).map(function (shadow) {
                    return "shadow" + (shadow === 'default' ? '' : '-' + shadow);
                }), opacity: _this.getGeneratedClassesWithOpacities().opacities });
        };
        this.transitions = function () {
            return __assign(__assign({}, defaultClasses.Transitions), { transitionProperty: Object.keys(_this.theme.transitionProperty).map(function (property) { return 'transition-' + property; }), transitionDuration: Object.keys(_this.theme.transitionDuration).map(function (value) { return 'duration-' + value; }), transitionTimingFunction: Object.keys(_this.theme.transitionTimingFunction).map(function (value) { return 'ease-' + value; }), transitionDelay: Object.keys(_this.theme.transitionDelay).map(function (value) { return 'delay-' + value; }) });
        };
        this.transforms = function () {
            return __assign(__assign({}, defaultClasses.Transforms), { scale: ['', 'x-', 'y-'].flatMap(function (x) {
                    return Object.keys(_this.theme.scale).map(function (value) { return 'scale-' + x + value; });
                }), rotate: Object.keys(_this.theme.rotate).map(function (value) { return 'rotate-' + value; }), 
                // translate gets values from theme.spacing in addition to 50% and 100% variations
                // by default and theme.translate overrides this behaviour.
                translate: ['translate-x', '-translate-x', 'translate-y', '-translate-y'].flatMap(function (x) {
                    return Object.keys(_.isEmpty(_this.theme.translate)
                        ? __assign(__assign({}, _this.theme.spacing), { full: '100%', '1/2': '50%' }) : _this.theme.translate).map(function (value) { return x + '-' + value; });
                }), skew: ['x', 'y'].flatMap(function (side) {
                    return Object.keys(_this.theme.skew).map(function (value) {
                        return value.startsWith('-') ? "-skew-" + side + "-" + value.substring(1) : "skew-" + side + "-" + value;
                    });
                }), transformOrigin: Object.keys(_this.theme.transformOrigin).map(function (value) { return 'origin-' + value; }) });
        };
        this.interactivity = function () {
            return __assign(__assign({}, defaultClasses.Interactivity), { cursor: Object.keys(_this.theme.cursor).map(function (x) { return 'cursor-' + x; }) });
        };
        this.SVG = function () {
            return __assign(__assign({}, defaultClasses.SVG), { fill: Object.keys(_this.theme.fill).map(function (value) { return 'fill-' + value; }), stroke: Object.keys(_this.theme.stroke).map(function (value) { return 'stroke-' + value; }), strokeWidth: Object.keys(_this.theme.strokeWidth).map(function (value) { return 'stroke-' + value; }) });
        };
        this.accessibility = function () {
            return defaultClasses.Accessibility;
        };
        this.flexBox = function () {
            return __assign(__assign({}, defaultClasses.FlexBox), { flexGrow: Object.keys(_this.theme.flexGrow).map(function (value) { return 'flex-grow' + (value === 'default' ? '' : "-" + value); }), flexShrink: Object.keys(_this.theme.flexShrink).map(function (value) { return 'flex-shrink' + (value === 'default' ? '' : "-" + value); }), order: Object.keys(_this.theme.order).map(function (value) { return "order-" + value; }) });
        };
        this.grid = function () {
            return __assign(__assign({}, defaultClasses.Grid), { gridTemplateColumns: Object.keys(_this.theme.gridTemplateColumns).map(function (value) { return "grid-cols-" + value; }), gridColumn: Object.keys(_this.theme.gridColumn).map(function (value) { return "col-" + value; }), gridColumnStart: Object.keys(_this.theme.gridColumnStart).map(function (value) { return "col-start-" + value; }), gridColumnEnd: Object.keys(_this.theme.gridColumnEnd).map(function (value) { return "col-end-" + value; }), gridTemplateRows: Object.keys(_this.theme.gridTemplateRows).map(function (value) { return "grid-rows-" + value; }), gridRow: Object.keys(_this.theme.gridRow).map(function (value) { return "row-" + value; }), gridRowStart: Object.keys(_this.theme.gridRowStart).map(function (value) { return "row-start-" + value; }), gridRowEnd: Object.keys(_this.theme.gridRowEnd).map(function (value) { return "row-end-" + value; }), gridGap: ['gap-', 'row-gap-', 'col-gap-'].flatMap(function (x) {
                    // grid gap inherits its values from theme.spacing by default, but theme.gap overrides it.
                    return Object.keys(_.isEmpty(_this.theme.gap)
                        ? _this.theme.spacing
                        : _this.theme.gap).map(function (gapValue) { return x + gapValue; });
                }) });
        };
        this.spacing = function () {
            return {
                space: _this.getGeneratedClassesWithSpacing().spaceBetweens,
                padding: _this.getGeneratedClassesWithSpacing().paddings,
                margin: _this.getGeneratedClassesWithSpacing().margins,
            };
        };
        this.sizing = function () {
            // prettier-ignore
            var extraWidthSizing = ['full', 'screen', 'auto', '1/2', '1/3', '2/3', '1/4', '2/4', '3/4',
                '1/5', '2/5', '3/5', '4/5', '1/6', '2/6', '3/6', '4/6', '5/6', '1/12', '2/12', '3/12', '4/12',
                '5/12', '6/12', '7/12', '8/12', '9/12', '10/12', '11/12'];
            var extraHeightSizing = ['full', 'screen'];
            return __assign(__assign({}, defaultClasses.Sizing), { 
                // width values come from theme.spacing + `extraWidthSizing` by default
                // and theme.width overrides this default behaviour.
                // prettier-ignore
                width: (_.isEmpty(_this.theme.width)
                    ? Object.keys(_this.theme.spacing).concat(extraWidthSizing)
                    : Object.keys(_this.theme.width)).map(function (x) { return 'w-' + x; }), minWidth: Object.keys(_this.theme.minWidth).map(function (x) { return 'min-w-' + x; }), maxWidth: Object.keys(_this.theme.maxWidth).map(function (x) { return 'max-w-' + x; }), 
                // height values come from theme.spacing + `extraHeightSizing` by default
                // and overridden by theme.height.
                // prettier-ignore
                height: (_.isEmpty(_this.theme.height)
                    ? Object.keys(_this.theme.spacing).concat(extraHeightSizing)
                    : Object.keys(_this.theme.height)).map(function (x) { return 'h-' + x; }), minHeight: Object.keys(_this.theme.minHeight).map(function (x) { return 'min-h-' + x; }), maxHeight: Object.keys(_this.theme.maxHeight).map(function (x) { return 'max-h-' + x; }) });
        };
        this.typography = function () {
            return __assign(__assign({}, defaultClasses.Typography), { fontFamily: Object.keys(_this.theme.fontFamily).map(function (value) { return 'font-' + value; }), fontSize: Object.keys(_this.theme.fontSize).map(function (size) { return 'font-' + size; }), fontWeight: Object.keys(_this.theme.fontWeight).map(function (weight) { return 'font-' + weight; }), letterSpacing: Object.keys(_this.theme.letterSpacing).map(function (value) { return 'tracking-' + value; }), lineHeight: Object.keys(_this.theme.lineHeight).map(function (value) { return 'leading-' + value; }), listStyleType: Object.keys(_this.theme.listStyleType).map(function (value) { return 'list-' + value; }), placeholderColor: _this.getGeneratedClassesWithColors('placeholder'), placeholderOpacity: _this.getGeneratedClassesWithOpacities().placeholderOpacities, textColor: _this.getGeneratedClassesWithColors('text'), textOpacity: _this.getGeneratedClassesWithOpacities().textOpacities });
        };
        this.getGeneratedClassesWithColors = function (classPayload) {
            var _a = _this.configScanner.getThemeProperty('colors'), colorsNames = _a[0], colorsShades = _a[1];
            return colorsNames.flatMap(function (colorName, i) {
                var colorShade = colorsShades[i];
                if (typeof colorShade === 'object' && colorShade !== null) {
                    return Object.keys(colorShade).map(function (shade) { return classPayload + "-" + colorName + (shade === 'default' ? '' : "-" + shade); });
                }
                return classPayload + "-" + colorName;
            });
        };
        this.getGeneratedClassesWithOpacities = function () {
            var allOpacities = _this.configScanner.getTheme().opacity;
            var getOpacity = function (themePropertyName, outputNamePrefix) {
                var generatedOpacities = generateOpacities(allOpacities, _this.theme, themePropertyName);
                return Object.keys(generatedOpacities).map(function (opacity) { return outputNamePrefix + "-opacity-" + opacity; });
            };
            return {
                opacities: Object.keys(allOpacities).map(function (opacity) { return "opacity-" + opacity; }),
                textOpacities: getOpacity('textOpacity', 'text'),
                backgroundOpacities: getOpacity('backgroundOpacity', 'bg'),
                borderOpacities: getOpacity('borderOpacity', 'border'),
                divideOpacities: getOpacity('divideOpacity', 'divide'),
                placeholderOpacities: getOpacity('placeholderOpacity', 'placeholder'),
            };
        };
        this.getGeneratedClassesWithSpacing = function () {
            var paddings = [];
            var margins = [];
            var widths = [];
            var heights = [];
            var spaceBetweens = ["space-x-reverse", "space-y-reverse"];
            var sides = ['', 'y', 'x', 't', 'r', 'b', 'l'];
            sides.map(function (side) {
                paddings.push("p" + side + "-auto");
                margins.push("m" + side + "-auto");
            });
            ['auto', 'full', 'screen'].map(function (spacing) { return heights.push("h-" + spacing); });
            // prettier-ignore
            [
                '1/2', '1/3', '2/3', '1/4', '2/4', '3/4', '1/5', '2/5', '3/5', '4/5', '1/6',
                '2/6', '3/6', '4/6', '5/6', '1/12', '2/12', '3/12', '4/12', '5/12', '6/12',
                '7/12', '8/12', '9/12', '10/12', '11/12', 'auto', 'full', 'screen'
            ].map(function (spacing) { return widths.push("w-" + spacing); });
            var _a = _this.configScanner.getThemeProperty('spacing'), spacingKeys = _a[0], spacingValues = _a[1];
            spacingKeys.map(function (spacing, i) {
                widths.push("w-" + spacing);
                heights.push("h-" + spacing);
                sides.map(function (side) {
                    paddings.push("p" + side + "-" + spacing);
                    margins.push("m" + side + "-" + spacing);
                    if (parseInt(spacing, 10) !== 0 && spacingValues[i] !== '0') {
                        paddings.push("-p" + side + "-" + spacing);
                        margins.push("-m" + side + "-" + spacing);
                    }
                });
                ['', '-'].map(function (spaceBetweenPrefix) {
                    ['x', 'y'].map(function (axis) {
                        spaceBetweens.push(spaceBetweenPrefix + "space-" + axis + "-" + spacing);
                    });
                });
            });
            return {
                paddings: paddings,
                margins: margins,
                widths: widths,
                heights: heights,
                spaceBetweens: spaceBetweens,
            };
        };
        this.getGeneratedPseudoClasses = function () {
            var pseudoClasses = [];
            var classesCategories = Object.keys(_this.configScanner.getVariants());
            var classesVariants = Object.values(_this.configScanner.getVariants());
            classesCategories.map(function (k, i) {
                var key = k;
                var classesOfCategoryKey;
                var variants = classesVariants[i];
                var classesWithOpacities = _this.getGeneratedClassesWithOpacities();
                var classesWithSpacing = _this.getGeneratedClassesWithSpacing();
                switch (key) {
                    case 'gap':
                        classesOfCategoryKey = defaultClasses.Grid.gridGap;
                        break;
                    case 'inset':
                        classesOfCategoryKey = defaultClasses.Layout.topRightBottomLeft;
                        break;
                    case 'accessibility':
                        classesOfCategoryKey = defaultClasses.Accessibility.screenReaders;
                        break;
                    case 'transform':
                        classesOfCategoryKey = [];
                        var configHasOtherTransforms = classesCategories.some(function (v) { return Object.keys(defaultClasses.Transforms).indexOf(v) >= 0; });
                        if (configHasOtherTransforms) {
                            var transformsNotInConfig = Object.keys(defaultClasses.Transforms).filter(function (el) { return !classesCategories.includes(el); });
                            transformsNotInConfig.map(function (transformClass) {
                                variants.map(function (variant) {
                                    if (variant === 'responsive') {
                                        var breakpoints = _this.configScanner.getThemeProperty('screens')[0];
                                        breakpoints.map(function (breakpointVariant) {
                                            pseudoClasses.push(_this.prefix + breakpointVariant + _this.separator + transformClass);
                                        });
                                    }
                                    else {
                                        pseudoClasses.push(_this.prefix + variant + _this.separator + transformClass);
                                    }
                                });
                            });
                        }
                        else {
                            classesOfCategoryKey = allTransformClasses;
                        }
                        break;
                    case 'backgroundColor':
                        classesOfCategoryKey = _this.getGeneratedClassesWithColors('bg');
                        break;
                    case 'placeholderColor':
                        classesOfCategoryKey = _this.getGeneratedClassesWithColors('placeholder');
                        break;
                    case 'borderColor':
                        classesOfCategoryKey = _this.getGeneratedClassesWithColors('border');
                        break;
                    case 'textColor':
                        classesOfCategoryKey = _this.getGeneratedClassesWithColors('text');
                        break;
                    case 'divideColor':
                        classesOfCategoryKey = _this.getGeneratedClassesWithColors('divide');
                        break;
                    case 'opacity':
                        classesOfCategoryKey = classesWithOpacities.opacities;
                        break;
                    case 'textOpacity':
                        classesOfCategoryKey = classesWithOpacities.textOpacities;
                        break;
                    case 'backgroundOpacity':
                        classesOfCategoryKey = classesWithOpacities.backgroundOpacities;
                        break;
                    case 'borderOpacity':
                        classesOfCategoryKey = classesWithOpacities.borderOpacities;
                        break;
                    case 'divideOpacity':
                        classesOfCategoryKey = classesWithOpacities.divideOpacities;
                        break;
                    case 'placeholderOpacity':
                        classesOfCategoryKey = classesWithOpacities.placeholderOpacities;
                        break;
                    case 'width':
                        classesOfCategoryKey = classesWithSpacing.widths;
                        break;
                    case 'height':
                        classesOfCategoryKey = classesWithSpacing.heights;
                        break;
                    case 'margin':
                        classesOfCategoryKey = classesWithSpacing.margins;
                        break;
                    case 'padding':
                        classesOfCategoryKey = classesWithSpacing.paddings;
                        break;
                    case 'space':
                        classesOfCategoryKey = classesWithSpacing.spaceBetweens;
                        break;
                    default:
                        classesOfCategoryKey = AllClassesFlat[key];
                        break;
                }
                classesOfCategoryKey.map(function (c) {
                    variants.map(function (variant) {
                        if (variant === 'responsive') {
                            var breakpoints = _this.configScanner.getThemeProperty('screens')[0];
                            breakpoints.map(function (breakpointVariant) {
                                pseudoClasses.push(breakpointVariant + _this.separator + _this.prefix + c);
                            });
                        }
                        else {
                            pseudoClasses.push(variant + _this.separator + _this.prefix + c);
                        }
                    });
                });
            });
            return pseudoClasses;
        };
        var configScanner = new ConfigScanner(tailwindConfig);
        this.prefix = configScanner.getPrefix();
        this.separator = configScanner.getSeparator();
        this.theme = configScanner.getTheme();
        this.configScanner = configScanner;
        this.allGeneratedClasses = {
            Accessibility: this.accessibility(),
            Backgrounds: this.backgrounds(),
            Borders: this.borders(),
            Tables: this.tables(),
            Effects: this.effects(),
            Transitions: this.transitions(),
            FlexBox: this.flexBox(),
            Grid: this.grid(),
            Spacing: this.spacing(),
            Interactivity: this.interactivity(),
            Layout: this.layout(),
            Sizing: this.sizing(),
            SVG: this.SVG(),
            Transforms: this.transforms(),
            Typography: this.typography(),
            PseudoClasses: {
                variants: this.getGeneratedPseudoClasses(),
            },
        };
    }
    return ClassesGenerator;
}());
export { ClassesGenerator };
//# sourceMappingURL=ClassesGenerator.js.map