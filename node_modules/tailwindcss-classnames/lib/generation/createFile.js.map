{"version":3,"file":"createFile.js","sourceRoot":"","sources":["../../src/generation/createFile.ts"],"names":[],"mappings":";;;;AAAA,kDAAoB;AACpB,0DAA4B;AAC5B,iEAA8D;AAC9D,uDAAoD;AASpD,SAAgB,4BAA4B,CAAC,OAAgB;IACpD,IAAA,cAAc,GAAkE,OAAO,eAAzE,EAAE,cAAc,GAAkD,OAAO,eAAzD,EAAE,qBAAqB,GAA2B,OAAO,sBAAlC,EAAE,qBAAqB,GAAI,OAAO,sBAAX,CAAY;IAE/F,iBAAiB;IACjB,IAAI,CAAC,cAAc;QACjB,OAAO,OAAO,CAAC,KAAK,CAAC,yCAAyC,CAAC,GAAG,CAAC,CAAC;IACtE,IAAI,CAAC,cAAc;QACjB,OAAO,OAAO,CAAC,KAAK,CAAC,8DAA8D,CAAC,GAAG,CAAC,CAAC;IAC3F,IAAI,CAAC,qBAAqB;QACxB,OAAO,OAAO,CAAC,KAAK,CAAC,uDAAuD,CAAC,GAAG,CAAC,CAAC;IACpF,IAAI,CAAC,qBAAqB;QACxB,OAAO,OAAO,CAAC,KAAK,CAAC,yDAAyD,CAAC,GAAG,CAAC,CAAC;IAEtF,YAAE,CAAC,QAAQ,CAAC,OAAK,cAAgB,EAAE,EAAC,QAAQ,EAAE,OAAO,EAAC,EAAE,UAAC,GAAG,EAAE,IAAI;QAChE,IAAI,GAAG,EAAE;YACP,OAAO,CAAC,KAAK,CAAC,CAAA,wBAAqB,cAAc,OAAG,CAAA,CAAC,GAAG,CAAC,CAAC;YAC1D,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACpB;QAED,IAAM,4BAA4B,GAAG,IAAI,CAAC,QAAQ,CAAC,2BAA2B,CAAC;YAC7E,CAAC,CAAC,+BAA+B;YACjC,CAAC,CAAC,EAAE,CAAC;QAEP,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,2CAA2C,EAAE,EAAE,CAAC,CAAC;QAErE,IAAM,gBAAgB,GAAG,IAAI,mCAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAE1D,IAAM,oBAAoB,GACxB,OAAO,qBAAqB,KAAK,WAAW;YAC5C,OAAO,qBAAqB,KAAK,WAAW;YAC5C,qBAAqB,KAAK,MAAM;YAChC,qBAAqB,KAAK,MAAM,CAAC;QAEnC,IAAM,sBAAsB,GAAG,oBAAoB,CAAC,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC,EAAE,CAAC;QAChG,IAAM,6BAA6B,GAAG,oBAAoB;YACxD,CAAC,CAAC,aAAW,qBAAqB,oDAA+C,qBAAqB,OAAI;YAC1G,CAAC,CAAC,EAAE,CAAC;QAEP,IAAM,MAAM,GAAG,uCAAkB;aAC9B,OAAO,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,QAAQ,EAAE,CAAC;aAE1D,OAAO,CAAC,2BAA2B,EAAE,4BAA4B,CAAC;aAElE,OAAO,CAAC,4BAA4B,EAAE,sBAAsB,CAAC;aAC7D,OAAO,CAAC,oCAAoC,EAAE,6BAA6B,CAAC,CAAC;QAEhF,YAAE,CAAC,SAAS,CAAC,KAAG,cAAgB,EAAE,MAAM,EAAE,MAAM,EAAE,UAAA,KAAK;YACrD,IAAI,KAAK,EAAE;gBACT,OAAO,CAAC,KAAK,CAAC,gBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;aAC7C;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AApDD,oEAoDC","sourcesContent":["import fs from 'fs';\nimport colors from 'colors';\nimport {baseTemplateString} from './utils/baseTemplateString';\nimport {ClassesGenerator} from './ClassesGenerator';\n\ninterface Options {\n  configFilename: string | void;\n  outputFilename: string | void;\n  customClassesFilename: string | 'none' | void;\n  customClassesTypeName: string | 'none' | void;\n}\n\nexport function createFileWithGeneratedTypes(options: Options): void {\n  const {configFilename, outputFilename, customClassesFilename, customClassesTypeName} = options;\n\n  //prettier-ignore\n  if (!configFilename)\n    return console.error('tailwindcss config file is not provided'.red);\n  if (!outputFilename)\n    return console.error('Please provide a valid filename to add generated types to it'.red);\n  if (!customClassesFilename)\n    return console.error('Please provide the file containing the custom classes'.red);\n  if (!customClassesTypeName)\n    return console.error('Please provide the name of exported custom classes type'.red);\n\n  fs.readFile(`./${configFilename}`, {encoding: 'utf-8'}, (err, data) => {\n    if (err) {\n      console.error(`Error Reading: \"./${configFilename}\"`.red);\n      console.error(err);\n    }\n\n    const customFormsPluginClassesType = data.includes('@tailwindcss/custom-forms')\n      ? '  | TCustomFormsPluginClasses'\n      : '';\n\n    data = data.replace(/(['\"])?plugins(['\"])? *: *\\[(.*|\\n)*?],?/g, '');\n\n    const classesGenerator = new ClassesGenerator(eval(data));\n\n    const isCustomClassesAdded: boolean =\n      typeof customClassesTypeName !== 'undefined' &&\n      typeof customClassesFilename !== 'undefined' &&\n      customClassesTypeName !== 'none' &&\n      customClassesFilename !== 'none';\n\n    const importedTCustomClasses = isCustomClassesAdded ? '  | TCustomClassesFromExternalFile' : '';\n    const TCustomClassesImportStatement = isCustomClassesAdded\n      ? `import {${customClassesTypeName} as TCustomClassesFromExternalFile} from './${customClassesFilename}';`\n      : '';\n\n    const result = baseTemplateString\n      .replace(/___ALL_CLASSES___/g, classesGenerator.generate())\n\n      .replace(/CUSTOM_FORMS_PLUGIN_TYPE/g, customFormsPluginClassesType)\n\n      .replace(/IMPORTED_T_CUSTOM_CLASSES/g, importedTCustomClasses)\n      .replace(/T_CUSTOM_CLASSES_IMPORT_STATEMENT/g, TCustomClassesImportStatement);\n\n    fs.writeFile(`${outputFilename}`, result, 'utf8', error => {\n      if (error) {\n        console.error(colors.red(error.toString()));\n      }\n    });\n  });\n}\n"]}