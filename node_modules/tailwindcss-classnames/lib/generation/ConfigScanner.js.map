{"version":3,"file":"ConfigScanner.js","sourceRoot":"","sources":["../../src/generation/ConfigScanner.ts"],"names":[],"mappings":";;;;AAAA,uEAAkF;AAClF,0DAAuB;AAEvB;IAME,wDAAwD;IAExD,uBAAY,cAA8B;QAA1C,iBAYC;;QAEM,cAAS,GAAG,cAAc,OAAA,KAAI,CAAC,MAAM,EAAX,CAAW,CAAC;QAEtC,iBAAY,GAAG,cAAc,OAAA,KAAI,CAAC,SAAS,EAAd,CAAc,CAAC;QAE5C,aAAQ,GAAG,cAAoB,OAAA,KAAI,CAAC,WAAW,EAAhB,CAAgB,CAAC;QAEhD,gBAAW,GAAG,cAAuB,OAAA,KAAI,CAAC,cAAc,EAAnB,CAAmB,CAAC;QAEzD,qBAAgB,GAAG,UACxB,aAAgC;YAEhC,OAAO;gBACL,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;gBAC5C,MAAM,CAAC,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;aAC/C,CAAC;QACJ,CAAC,CAAC;QA5BA,IAAI,CAAC,MAAM,GAAG,gBAAC,CAAC,OAAO,CAAC,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,cAAc,CAAC,MAAiB,CAAC;QACzF,IAAI,CAAC,SAAS,GAAG,gBAAC,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC;YAClD,CAAC,CAAC,GAAG;YACL,CAAC,CAAE,cAAc,CAAC,SAAoB,CAAC;QACzC,IAAI,CAAC,cAAc,GAAG,gBAAC,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC;YACtD,CAAC,CAAC,uCAAe,CAAC,0EAA0E;YAC5F,CAAC,uCAAK,uCAAe,GAAK,cAAc,CAAC,QAAQ,CAAC,CAAC;QACrD,IAAI,CAAC,WAAW,GAAG,gBAAC,CAAC,KAAK,uCACpB,0CAAkB,GAAK,cAAc,CAAC,KAAK,SAC/C,cAAc,CAAC,KAAK,0CAAE,MAAM,CAC7B,CAAC;IACJ,CAAC;IAkBH,oBAAC;AAAD,CAAC,AAtCD,IAsCC;AAtCY,sCAAa","sourcesContent":["import {defaultThemeConfig, defaultVariants} from './utils/defaultTailwindConfig';\nimport _ from 'lodash';\n\nexport class ConfigScanner {\n  private readonly prefix: string;\n  private readonly separator: string;\n  private readonly themeConfig: IThemeConfig;\n  private readonly variantsConfig: IVariantsConfig;\n\n  // FIXME: theme config does not consider function values\n\n  constructor(tailwindConfig: TailwindConfig) {\n    this.prefix = _.isEmpty(tailwindConfig?.prefix) ? '' : (tailwindConfig.prefix as string);\n    this.separator = _.isEmpty(tailwindConfig.separator)\n      ? ':'\n      : (tailwindConfig.separator as string);\n    this.variantsConfig = _.isEmpty(tailwindConfig.variants)\n      ? defaultVariants // Order does matter, defaultVariants will be overridden by themeVariants.\n      : {...defaultVariants, ...tailwindConfig.variants};\n    this.themeConfig = _.merge(\n      {...defaultThemeConfig, ...tailwindConfig.theme},\n      tailwindConfig.theme?.extend,\n    );\n  }\n\n  public getPrefix = (): string => this.prefix;\n\n  public getSeparator = (): string => this.separator;\n\n  public getTheme = (): IThemeConfig => this.themeConfig;\n\n  public getVariants = (): IVariantsConfig => this.variantsConfig;\n\n  public getThemeProperty = (\n    themeProperty: keyof IThemeProps,\n  ): [string[], Array<string | {[key: string]: string}>] => {\n    return [\n      Object.keys(this.themeConfig[themeProperty]),\n      Object.values(this.themeConfig[themeProperty]),\n    ];\n  };\n}\n"]}